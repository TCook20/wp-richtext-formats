"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _element = require("@wordpress/element");
var _classnames = _interopRequireDefault(require("classnames"));
var _blockEditor = require("@wordpress/block-editor");
var _data = require("@wordpress/data");
var _button = require("../button");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const ALLOWED_BLOCKS = [_button.name];
const DEFAULT_BLOCK = {
  name: _button.name,
  attributesToCopy: ['backgroundColor', 'border', 'className', 'fontFamily', 'fontSize', 'gradient', 'style', 'textColor', 'width']
};
function ButtonsEdit({
  attributes,
  className
}) {
  var _layout$orientation;
  const {
    fontSize,
    layout,
    style
  } = attributes;
  const blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _classnames.default)(className, {
      'has-custom-font-size': fontSize || style?.typography?.fontSize
    })
  });
  const preferredStyle = (0, _data.useSelect)(select => {
    const preferredStyleVariations = select(_blockEditor.store).getSettings().__experimentalPreferredStyleVariations;
    return preferredStyleVariations?.value?.[_button.name];
  }, []);
  const innerBlocksProps = (0, _blockEditor.useInnerBlocksProps)(blockProps, {
    allowedBlocks: ALLOWED_BLOCKS,
    defaultBlock: DEFAULT_BLOCK,
    directInsert: true,
    template: [[_button.name, {
      className: preferredStyle && `is-style-${preferredStyle}`
    }]],
    templateInsertUpdatesSelection: true,
    orientation: (_layout$orientation = layout?.orientation) !== null && _layout$orientation !== void 0 ? _layout$orientation : 'horizontal'
  });
  return (0, _element.createElement)("div", {
    ...innerBlocksProps
  });
}
var _default = ButtonsEdit;
exports.default = _default;
//# sourceMappingURL=edit.js.map