{"version":3,"names":["_element","require","_es","_interopRequireDefault","_blockEditor","_blocks","_components","_data","_dom","_i18n","_url","_icon","_list","_utils","TableOfContentsEdit","attributes","headings","onlyIncludeCurrentPage","clientId","setAttributes","blockProps","useBlockProps","canInsertList","useSelect","select","getBlockRootClientId","canInsertBlockType","blockEditorStore","rootClientId","__unstableMarkNextChangeAsNotPersistent","replaceBlocks","useDispatch","latestHeadings","_editorSelectors$getP","getBlockAttributes","getBlockName","getClientIdsWithDescendants","__experimentalGetGlobalBlocksByName","getGlobalBlocksByName","editorSelectors","pageBreakClientIds","isPaginated","length","allBlockClientIds","tocPage","tocIndex","indexOf","blockIndex","blockClientId","entries","_latestHeadings","headingPage","permalink","getPermalink","headingPageLink","addQueryArgs","page","blockName","removeQueryArgs","headingAttributes","canBeLinked","anchor","push","content","stripHTML","replace","level","link","fastDeepEqual","useEffect","headingTree","linearToNestedHeadingList","toolbarControls","createElement","BlockControls","ToolbarGroup","ToolbarButton","onClick","createBlock","ordered","values","renderToString","default","nestedHeadingList","__","inspectorControls","InspectorControls","PanelBody","title","ToggleControl","__nextHasNoMarginBottom","label","checked","onChange","value","help","Fragment","Placeholder","icon","BlockIcon","instructions","inert"],"sources":["@wordpress/block-library/src/table-of-contents/edit.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport fastDeepEqual from 'fast-deep-equal/es6';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tBlockControls,\n\tBlockIcon,\n\tInspectorControls,\n\tstore as blockEditorStore,\n\tuseBlockProps,\n} from '@wordpress/block-editor';\nimport { createBlock } from '@wordpress/blocks';\nimport {\n\tPanelBody,\n\tPlaceholder,\n\tToggleControl,\n\tToolbarButton,\n\tToolbarGroup,\n} from '@wordpress/components';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __unstableStripHTML as stripHTML } from '@wordpress/dom';\nimport { renderToString, useEffect } from '@wordpress/element';\nimport { __ } from '@wordpress/i18n';\nimport { addQueryArgs, removeQueryArgs } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport icon from './icon';\nimport TableOfContentsList from './list';\nimport { linearToNestedHeadingList } from './utils';\n\n/** @typedef {import('./utils').HeadingData} HeadingData */\n\n/**\n * Table of Contents block edit component.\n *\n * @param {Object}                       props                                   The props.\n * @param {Object}                       props.attributes                        The block attributes.\n * @param {HeadingData[]}                props.attributes.headings               A list of data for each heading in the post.\n * @param {boolean}                      props.attributes.onlyIncludeCurrentPage Whether to only include headings from the current page (if the post is paginated).\n * @param {string}                       props.clientId\n * @param {(attributes: Object) => void} props.setAttributes\n *\n * @return {WPComponent} The component.\n */\nexport default function TableOfContentsEdit( {\n\tattributes: { headings = [], onlyIncludeCurrentPage },\n\tclientId,\n\tsetAttributes,\n} ) {\n\tconst blockProps = useBlockProps();\n\n\tconst canInsertList = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getBlockRootClientId, canInsertBlockType } =\n\t\t\t\tselect( blockEditorStore );\n\t\t\tconst rootClientId = getBlockRootClientId( clientId );\n\n\t\t\treturn canInsertBlockType( 'core/list', rootClientId );\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\tconst { __unstableMarkNextChangeAsNotPersistent, replaceBlocks } =\n\t\tuseDispatch( blockEditorStore );\n\n\t/**\n\t * The latest heading data, or null if the new data deeply equals the saved\n\t * headings attribute.\n\t *\n\t * Since useSelect forces a re-render when its return value is shallowly\n\t * inequal to its prior call, we would be re-rendering this block every time\n\t * the stores change, even if the latest headings were deeply equal to the\n\t * ones saved in the block attributes.\n\t *\n\t * By returning null when they're equal, we reduce that to 2 renders: one\n\t * when there are new latest headings (and so it returns them), and one when\n\t * they haven't changed (so it returns null). As long as the latest heading\n\t * data remains the same, further calls of the useSelect callback will\n\t * continue to return null, thus preventing any forced re-renders.\n\t */\n\tconst latestHeadings = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tgetBlockAttributes,\n\t\t\t\tgetBlockName,\n\t\t\t\tgetClientIdsWithDescendants,\n\t\t\t\t__experimentalGetGlobalBlocksByName: getGlobalBlocksByName,\n\t\t\t} = select( blockEditorStore );\n\n\t\t\t// FIXME: @wordpress/block-library should not depend on @wordpress/editor.\n\t\t\t// Blocks can be loaded into a *non-post* block editor, so to avoid\n\t\t\t// declaring @wordpress/editor as a dependency, we must access its\n\t\t\t// store by string. When the store is not available, editorSelectors\n\t\t\t// will be null, and the block's saved markup will lack permalinks.\n\t\t\t// eslint-disable-next-line @wordpress/data-no-store-string-literals\n\t\t\tconst editorSelectors = select( 'core/editor' );\n\n\t\t\tconst pageBreakClientIds = getGlobalBlocksByName( 'core/nextpage' );\n\n\t\t\tconst isPaginated = pageBreakClientIds.length !== 0;\n\n\t\t\t// Get the client ids of all blocks in the editor.\n\t\t\tconst allBlockClientIds = getClientIdsWithDescendants();\n\n\t\t\t// If onlyIncludeCurrentPage is true, calculate the page (of a paginated post) this block is part of, so we know which headings to include; otherwise, skip the calculation.\n\t\t\tlet tocPage = 1;\n\n\t\t\tif ( isPaginated && onlyIncludeCurrentPage ) {\n\t\t\t\t// We can't use getBlockIndex because it only returns the index\n\t\t\t\t// relative to sibling blocks.\n\t\t\t\tconst tocIndex = allBlockClientIds.indexOf( clientId );\n\n\t\t\t\tfor ( const [\n\t\t\t\t\tblockIndex,\n\t\t\t\t\tblockClientId,\n\t\t\t\t] of allBlockClientIds.entries() ) {\n\t\t\t\t\t// If we've reached blocks after the Table of Contents, we've\n\t\t\t\t\t// finished calculating which page the block is on.\n\t\t\t\t\tif ( blockIndex >= tocIndex ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ( getBlockName( blockClientId ) === 'core/nextpage' ) {\n\t\t\t\t\t\ttocPage++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst _latestHeadings = [];\n\n\t\t\t/** The page (of a paginated post) a heading will be part of. */\n\t\t\tlet headingPage = 1;\n\n\t\t\t/**\n\t\t\t * A permalink to the current post. If the core/editor store is\n\t\t\t * unavailable, this variable will be null.\n\t\t\t */\n\t\t\tconst permalink = editorSelectors?.getPermalink() ?? null;\n\n\t\t\tlet headingPageLink = null;\n\n\t\t\t// If the core/editor store is available, we can add permalinks to the\n\t\t\t// generated table of contents.\n\t\t\tif ( typeof permalink === 'string' ) {\n\t\t\t\theadingPageLink = isPaginated\n\t\t\t\t\t? addQueryArgs( permalink, { page: headingPage } )\n\t\t\t\t\t: permalink;\n\t\t\t}\n\n\t\t\tfor ( const blockClientId of allBlockClientIds ) {\n\t\t\t\tconst blockName = getBlockName( blockClientId );\n\t\t\t\tif ( blockName === 'core/nextpage' ) {\n\t\t\t\t\theadingPage++;\n\n\t\t\t\t\t// If we're only including headings from the current page (of\n\t\t\t\t\t// a paginated post), then exit the loop if we've reached the\n\t\t\t\t\t// pages after the one with the Table of Contents block.\n\t\t\t\t\tif ( onlyIncludeCurrentPage && headingPage > tocPage ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( typeof permalink === 'string' ) {\n\t\t\t\t\t\theadingPageLink = addQueryArgs(\n\t\t\t\t\t\t\tremoveQueryArgs( permalink, [ 'page' ] ),\n\t\t\t\t\t\t\t{ page: headingPage }\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// If we're including all headings or we've reached headings on\n\t\t\t\t// the same page as the Table of Contents block, add them to the\n\t\t\t\t// list.\n\t\t\t\telse if (\n\t\t\t\t\t! onlyIncludeCurrentPage ||\n\t\t\t\t\theadingPage === tocPage\n\t\t\t\t) {\n\t\t\t\t\tif ( blockName === 'core/heading' ) {\n\t\t\t\t\t\tconst headingAttributes =\n\t\t\t\t\t\t\tgetBlockAttributes( blockClientId );\n\n\t\t\t\t\t\tconst canBeLinked =\n\t\t\t\t\t\t\ttypeof headingPageLink === 'string' &&\n\t\t\t\t\t\t\ttypeof headingAttributes.anchor === 'string' &&\n\t\t\t\t\t\t\theadingAttributes.anchor !== '';\n\n\t\t\t\t\t\t_latestHeadings.push( {\n\t\t\t\t\t\t\t// Convert line breaks to spaces, and get rid of HTML tags in the headings.\n\t\t\t\t\t\t\tcontent: stripHTML(\n\t\t\t\t\t\t\t\theadingAttributes.content.replace(\n\t\t\t\t\t\t\t\t\t/(<br *\\/?>)+/g,\n\t\t\t\t\t\t\t\t\t' '\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tlevel: headingAttributes.level,\n\t\t\t\t\t\t\tlink: canBeLinked\n\t\t\t\t\t\t\t\t? `${ headingPageLink }#${ headingAttributes.anchor }`\n\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( fastDeepEqual( headings, _latestHeadings ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn _latestHeadings;\n\t\t},\n\t\t[ clientId, onlyIncludeCurrentPage, headings ]\n\t);\n\n\tuseEffect( () => {\n\t\tif ( latestHeadings !== null ) {\n\t\t\t// This is required to keep undo working and not create 2 undo steps\n\t\t\t// for each heading change.\n\t\t\t__unstableMarkNextChangeAsNotPersistent();\n\t\t\tsetAttributes( { headings: latestHeadings } );\n\t\t}\n\t}, [ latestHeadings ] );\n\n\tconst headingTree = linearToNestedHeadingList( headings );\n\n\tconst toolbarControls = canInsertList && (\n\t\t<BlockControls>\n\t\t\t<ToolbarGroup>\n\t\t\t\t<ToolbarButton\n\t\t\t\t\tonClick={ () =>\n\t\t\t\t\t\treplaceBlocks(\n\t\t\t\t\t\t\tclientId,\n\t\t\t\t\t\t\tcreateBlock( 'core/list', {\n\t\t\t\t\t\t\t\tordered: true,\n\t\t\t\t\t\t\t\tvalues: renderToString(\n\t\t\t\t\t\t\t\t\t<TableOfContentsList\n\t\t\t\t\t\t\t\t\t\tnestedHeadingList={ headingTree }\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t{ __( 'Convert to static list' ) }\n\t\t\t\t</ToolbarButton>\n\t\t\t</ToolbarGroup>\n\t\t</BlockControls>\n\t);\n\n\tconst inspectorControls = (\n\t\t<InspectorControls>\n\t\t\t<PanelBody title={ __( 'Settings' ) }>\n\t\t\t\t<ToggleControl\n\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\tlabel={ __( 'Only include current page' ) }\n\t\t\t\t\tchecked={ onlyIncludeCurrentPage }\n\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\tsetAttributes( { onlyIncludeCurrentPage: value } )\n\t\t\t\t\t}\n\t\t\t\t\thelp={\n\t\t\t\t\t\tonlyIncludeCurrentPage\n\t\t\t\t\t\t\t? __(\n\t\t\t\t\t\t\t\t\t'Only including headings from the current page (if the post is paginated).'\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t: __(\n\t\t\t\t\t\t\t\t\t'Toggle to only include headings from the current page (if the post is paginated).'\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</PanelBody>\n\t\t</InspectorControls>\n\t);\n\n\t// If there are no headings or the only heading is empty.\n\t// Note that the toolbar controls are intentionally omitted since the\n\t// \"Convert to static list\" option is useless to the placeholder state.\n\tif ( headings.length === 0 ) {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div { ...blockProps }>\n\t\t\t\t\t<Placeholder\n\t\t\t\t\t\ticon={ <BlockIcon icon={ icon } /> }\n\t\t\t\t\t\tlabel={ __( 'Table of Contents' ) }\n\t\t\t\t\t\tinstructions={ __(\n\t\t\t\t\t\t\t'Start adding Heading blocks to create a table of contents. Headings with HTML anchors will be linked here.'\n\t\t\t\t\t\t) }\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{ inspectorControls }\n\t\t\t</>\n\t\t);\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<nav { ...blockProps }>\n\t\t\t\t<ol inert=\"true\">\n\t\t\t\t\t<TableOfContentsList nestedHeadingList={ headingTree } />\n\t\t\t\t</ol>\n\t\t\t</nav>\n\t\t\t{ toolbarControls }\n\t\t\t{ inspectorControls }\n\t\t</>\n\t);\n}\n"],"mappings":"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"}