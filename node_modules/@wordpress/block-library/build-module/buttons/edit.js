import { createElement } from "@wordpress/element";
/**
 * External dependencies
 */
import classnames from 'classnames';

/**
 * WordPress dependencies
 */
import { useBlockProps, useInnerBlocksProps, store as blockEditorStore } from '@wordpress/block-editor';
import { useSelect } from '@wordpress/data';

/**
 * Internal dependencies
 */
import { name as buttonBlockName } from '../button';
const ALLOWED_BLOCKS = [buttonBlockName];
const DEFAULT_BLOCK = {
  name: buttonBlockName,
  attributesToCopy: ['backgroundColor', 'border', 'className', 'fontFamily', 'fontSize', 'gradient', 'style', 'textColor', 'width']
};
function ButtonsEdit({
  attributes,
  className
}) {
  var _layout$orientation;
  const {
    fontSize,
    layout,
    style
  } = attributes;
  const blockProps = useBlockProps({
    className: classnames(className, {
      'has-custom-font-size': fontSize || style?.typography?.fontSize
    })
  });
  const preferredStyle = useSelect(select => {
    const preferredStyleVariations = select(blockEditorStore).getSettings().__experimentalPreferredStyleVariations;
    return preferredStyleVariations?.value?.[buttonBlockName];
  }, []);
  const innerBlocksProps = useInnerBlocksProps(blockProps, {
    allowedBlocks: ALLOWED_BLOCKS,
    defaultBlock: DEFAULT_BLOCK,
    directInsert: true,
    template: [[buttonBlockName, {
      className: preferredStyle && `is-style-${preferredStyle}`
    }]],
    templateInsertUpdatesSelection: true,
    orientation: (_layout$orientation = layout?.orientation) !== null && _layout$orientation !== void 0 ? _layout$orientation : 'horizontal'
  });
  return createElement("div", {
    ...innerBlocksProps
  });
}
export default ButtonsEdit;
//# sourceMappingURL=edit.js.map