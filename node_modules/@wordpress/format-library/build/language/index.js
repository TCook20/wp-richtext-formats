"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.language = void 0;
var _element = require("@wordpress/element");
var _i18n = require("@wordpress/i18n");
var _blockEditor = require("@wordpress/block-editor");
var _components = require("@wordpress/components");
var _richText = require("@wordpress/rich-text");
var _icons = require("@wordpress/icons");
/**
 * WordPress dependencies
 */

/**
 * WordPress dependencies
 */

const name = 'core/language';
const title = (0, _i18n.__)('Language');
const language = {
  name,
  tagName: 'bdo',
  className: null,
  edit: Edit,
  title
};
exports.language = language;
function Edit({
  isActive,
  value,
  onChange,
  contentRef
}) {
  const [isPopoverVisible, setIsPopoverVisible] = (0, _element.useState)(false);
  const togglePopover = () => {
    setIsPopoverVisible(state => !state);
  };
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.RichTextToolbarButton, {
    icon: _icons.language,
    label: title,
    title: title,
    onClick: () => {
      if (isActive) {
        onChange((0, _richText.removeFormat)(value, name));
      } else {
        togglePopover();
      }
    },
    isActive: isActive,
    role: "menuitemcheckbox"
  }), isPopoverVisible && (0, _element.createElement)(InlineLanguageUI, {
    value: value,
    onChange: onChange,
    onClose: togglePopover,
    contentRef: contentRef
  }));
}
function InlineLanguageUI({
  value,
  contentRef,
  onChange,
  onClose
}) {
  const popoverAnchor = (0, _richText.useAnchor)({
    editableContentElement: contentRef.current,
    settings: language
  });
  const [lang, setLang] = (0, _element.useState)('');
  const [dir, setDir] = (0, _element.useState)('ltr');
  return (0, _element.createElement)(_components.Popover, {
    className: "block-editor-format-toolbar__language-popover",
    anchor: popoverAnchor,
    onClose: onClose
  }, (0, _element.createElement)("form", {
    className: "block-editor-format-toolbar__language-container-content",
    onSubmit: event => {
      event.preventDefault();
      onChange((0, _richText.applyFormat)(value, {
        type: name,
        attributes: {
          lang,
          dir
        }
      }));
      onClose();
    }
  }, (0, _element.createElement)(_components.TextControl, {
    label: title,
    value: lang,
    onChange: val => setLang(val),
    help: (0, _i18n.__)('A valid language attribute, like "en" or "fr".')
  }), (0, _element.createElement)(_components.SelectControl, {
    label: (0, _i18n.__)('Text direction'),
    value: dir,
    options: [{
      label: (0, _i18n.__)('Left to right'),
      value: 'ltr'
    }, {
      label: (0, _i18n.__)('Right to left'),
      value: 'rtl'
    }],
    onChange: val => setDir(val)
  }), (0, _element.createElement)(_components.__experimentalHStack, {
    alignment: "right"
  }, (0, _element.createElement)(_components.Button, {
    variant: "primary",
    type: "submit",
    text: (0, _i18n.__)('Apply')
  }))));
}
//# sourceMappingURL=index.js.map