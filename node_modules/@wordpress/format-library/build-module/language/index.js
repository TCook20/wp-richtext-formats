import { createElement, Fragment } from "@wordpress/element";
/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';

/**
 * WordPress dependencies
 */
import { RichTextToolbarButton } from '@wordpress/block-editor';
import { TextControl, SelectControl, Button, Popover, __experimentalHStack as HStack } from '@wordpress/components';
import { useState } from '@wordpress/element';
import { applyFormat, removeFormat, useAnchor } from '@wordpress/rich-text';
import { language as languageIcon } from '@wordpress/icons';
const name = 'core/language';
const title = __('Language');
export const language = {
  name,
  tagName: 'bdo',
  className: null,
  edit: Edit,
  title
};
function Edit({
  isActive,
  value,
  onChange,
  contentRef
}) {
  const [isPopoverVisible, setIsPopoverVisible] = useState(false);
  const togglePopover = () => {
    setIsPopoverVisible(state => !state);
  };
  return createElement(Fragment, null, createElement(RichTextToolbarButton, {
    icon: languageIcon,
    label: title,
    title: title,
    onClick: () => {
      if (isActive) {
        onChange(removeFormat(value, name));
      } else {
        togglePopover();
      }
    },
    isActive: isActive,
    role: "menuitemcheckbox"
  }), isPopoverVisible && createElement(InlineLanguageUI, {
    value: value,
    onChange: onChange,
    onClose: togglePopover,
    contentRef: contentRef
  }));
}
function InlineLanguageUI({
  value,
  contentRef,
  onChange,
  onClose
}) {
  const popoverAnchor = useAnchor({
    editableContentElement: contentRef.current,
    settings: language
  });
  const [lang, setLang] = useState('');
  const [dir, setDir] = useState('ltr');
  return createElement(Popover, {
    className: "block-editor-format-toolbar__language-popover",
    anchor: popoverAnchor,
    onClose: onClose
  }, createElement("form", {
    className: "block-editor-format-toolbar__language-container-content",
    onSubmit: event => {
      event.preventDefault();
      onChange(applyFormat(value, {
        type: name,
        attributes: {
          lang,
          dir
        }
      }));
      onClose();
    }
  }, createElement(TextControl, {
    label: title,
    value: lang,
    onChange: val => setLang(val),
    help: __('A valid language attribute, like "en" or "fr".')
  }), createElement(SelectControl, {
    label: __('Text direction'),
    value: dir,
    options: [{
      label: __('Left to right'),
      value: 'ltr'
    }, {
      label: __('Right to left'),
      value: 'rtl'
    }],
    onChange: val => setDir(val)
  }), createElement(HStack, {
    alignment: "right"
  }, createElement(Button, {
    variant: "primary",
    type: "submit",
    text: __('Apply')
  }))));
}
//# sourceMappingURL=index.js.map