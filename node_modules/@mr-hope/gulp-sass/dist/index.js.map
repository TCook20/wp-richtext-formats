{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/compile.ts","../src/legacy.ts"],"sourcesContent":["export const PLUGIN_NAME = \"gulp-sass\";\n","import { basename, dirname, extname, relative } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport {\n  CompileResult,\n  Exception,\n  StringOptions,\n  compileStringAsync,\n  compileString,\n} from \"sass\";\nimport { Transform } from \"stream\";\nimport { PLUGIN_NAME } from \"./utils\";\n\nimport chalk from \"chalk\";\nimport PluginError from \"plugin-error\";\nimport replaceExtension from \"replace-ext\";\nimport stripAnsi from \"strip-ansi\";\nimport Vinyl from \"vinyl\";\nimport applySourceMap from \"vinyl-sourcemaps-apply\";\n\nexport interface SassError extends Exception {\n  messageFormatted?: string;\n  messageOriginal?: string;\n  relativePath?: string;\n}\n\n// Handles returning the file to the stream\nconst handleFile = (\n  file: Vinyl.BufferFile,\n  result: CompileResult\n): Vinyl.BufferFile => {\n  // Build Source Maps\n  if (result.sourceMap) {\n    // Transform map into JSON\n    const sassMap = result.sourceMap;\n\n    // Grab the base file name that's being worked on\n    const sassFileSrc = file.relative;\n\n    sassMap.sources = sassMap.sources.map((source) =>\n      source.startsWith(\"data:\")\n        ? file.relative\n        : relative(dirname(file.path), fileURLToPath(source))\n    );\n\n    // Replace the map file with the original file name (but new extension)\n    sassMap.file = replaceExtension(sassFileSrc, \".css\");\n\n    // Apply the map\n    applySourceMap(file, sassMap);\n  }\n\n  file.contents = Buffer.from(result.css);\n  file.path = replaceExtension(file.path, \".css\");\n\n  if (file.stat)\n    file.stat.atime = file.stat.mtime = file.stat.ctime = new Date();\n\n  return file;\n};\n\ninterface PrivateGulpSass {\n  (pluginOptions?: StringOptions<\"sync\" | \"async\">, sync?: boolean): Transform;\n}\n\n// Main Gulp Sass function\nconst main: PrivateGulpSass = (pluginOptions = {}, sync) =>\n  new Transform({\n    objectMode: true,\n    transform(file: Vinyl, _enc, callback): void {\n      const options = { ...pluginOptions };\n\n      if (file.isNull()) return callback(null, file);\n\n      if (file.isStream())\n        return callback(\n          new PluginError(PLUGIN_NAME, \"Streaming not supported\")\n        );\n\n      if (file.isBuffer()) {\n        if (basename(file.path).indexOf(\"_\") === 0) return callback();\n\n        if (!file.contents.length) {\n          file.path = replaceExtension(file.path, \".css\");\n\n          return callback(null, file);\n        }\n\n        const content = file.contents.toString();\n\n        // Ensure `syntax` is `\"indented\"` if a `.sass` file\n        if (extname(file.path) === \".sass\") options.syntax = \"indented\";\n\n        if (!options.loadPaths) options.loadPaths = [];\n\n        // Ensure file's parent directory in the include path\n        options.loadPaths.unshift(dirname(file.path));\n\n        // Generate Source Maps if plugin source-map present\n        if (file.sourceMap) {\n          options.sourceMap = true;\n        }\n\n        // Handles error message\n        const errorHandler = (error: SassError): void => {\n          const filePath = error.span?.url?.pathname\n            ? error.span.url.pathname\n            : file.path;\n\n          const relativePath = relative(process.cwd(), filePath);\n          const message = [\n            chalk.underline(relativePath),\n            error.sassMessage,\n          ].join(\"\\n\");\n\n          error.messageFormatted = message;\n          error.messageOriginal = error.message;\n          error.message = stripAnsi(message);\n          error.relativePath = relativePath;\n\n          return callback(new PluginError(PLUGIN_NAME, error));\n        };\n\n        // Sync Sass render\n        if (sync)\n          try {\n            return callback(\n              null,\n              handleFile(file, compileString(content, options))\n            );\n          } catch (error) {\n            return errorHandler(error as SassError);\n          }\n\n        // Async Sass render\n        void compileStringAsync(content, options)\n          .then((result) => {\n            return callback(null, handleFile(file, result));\n          })\n          .catch((err: SassError) => {\n            return errorHandler(err);\n          });\n      }\n    },\n  });\n\n// Log errors nicely\nfunction logError(this: Transform, error: SassError): void {\n  const message = new PluginError(\n    \"sass\",\n    error.messageFormatted || error.message\n  ).toString();\n\n  process.stderr.write(`${message}\\n`);\n  this.emit(\"end\");\n}\n\nexport type SassOptions = StringOptions<\"sync\">;\n\nexport interface GulpSass {\n  (pluginOptions?: StringOptions<\"sync\">): Transform;\n  logError(error: SassError): void;\n}\n\n// Sync Sass render\nexport const sass: GulpSass = (pluginOptions?: StringOptions<\"sync\">) =>\n  main(pluginOptions, true);\n\nsass.logError = logError;\n\nexport type SassAsyncOptions = StringOptions<\"async\">;\n\nexport interface GulpSassAsync {\n  (pluginOptions?: StringOptions<\"async\">, sync?: boolean): Transform;\n  logError(error: SassError): void;\n}\n\n// Main Gulp Sass function\nexport const sassAsync: GulpSassAsync = (\n  pluginOptions?: StringOptions<\"async\">\n) => main(pluginOptions, false);\n\nsassAsync.logError = logError;\n","import { basename, dirname, extname, join, relative } from \"path\";\nimport {\n  LegacyException,\n  LegacyStringOptions,\n  LegacyResult,\n  render,\n  renderSync,\n} from \"sass\";\nimport { Transform } from \"stream\";\nimport { PLUGIN_NAME } from \"./utils\";\nimport type { RawSourceMap } from \"source-map-js\";\n\nimport chalk from \"chalk\";\nimport PluginError from \"plugin-error\";\nimport replaceExtension from \"replace-ext\";\nimport stripAnsi from \"strip-ansi\";\nimport Vinyl from \"vinyl\";\nimport applySourceMap from \"vinyl-sourcemaps-apply\";\n\nexport interface LegacySassMap extends RawSourceMap {\n  sourceRoot: string;\n  file: string;\n}\n\nexport interface LegacySassError extends LegacyException {\n  messageFormatted?: string;\n  messageOriginal?: string;\n  relativePath?: string;\n}\n\n// Handles returning the file to the stream\nconst legacyHandleFile = (\n  file: Vinyl.BufferFile,\n  result: LegacyResult\n): Vinyl.BufferFile => {\n  // Build Source Maps\n  if (result.map) {\n    // Transform map into JSON\n    const sassMap = JSON.parse(result.map.toString()) as LegacySassMap;\n\n    // Grab the stdout and transform it into stdin\n    const sassMapFile = sassMap.file.replace(/^stdout$/, \"stdin\");\n    // Grab the base file name that's being worked on\n    const sassFileSrc = file.relative;\n    // Grab the path portion of the file that's being worked on\n    const sassFileSrcPath = dirname(sassFileSrc);\n    let sourceFileIndex: number;\n\n    // Prepend the path to all files in the sources array except the file that's being worked on\n    if (sassFileSrcPath) sourceFileIndex = sassMap.sources.indexOf(sassMapFile);\n    sassMap.sources = sassMap.sources.map((source, index) =>\n      index === sourceFileIndex ? source : join(sassFileSrcPath, source)\n    );\n\n    // Remove 'stdin' from sources and replace with filenames!\n    sassMap.sources = sassMap.sources.filter((src) => src && src !== \"stdin\");\n\n    // Replace the map file with the original file name (but new extension)\n    sassMap.file = replaceExtension(sassFileSrc, \".css\");\n\n    // Apply the map\n    applySourceMap(file, sassMap);\n  }\n\n  file.contents = result.css;\n  file.path = replaceExtension(file.path, \".css\");\n\n  if (file.stat)\n    file.stat.atime = file.stat.mtime = file.stat.ctime = new Date();\n\n  return file;\n};\n\ninterface PrivateGulpSass {\n  (\n    pluginOptions?: LegacySassOptions | LegacySassAsyncOptions,\n    sync?: boolean\n  ): Transform;\n}\n\n// Legacy Gulp Sass function\nconst legacyMain: PrivateGulpSass = (pluginOptions = {}, sync) =>\n  new Transform({\n    objectMode: true,\n    transform(file: Vinyl, _enc, callback): void {\n      const options = <LegacyStringOptions<\"sync\" | \"async\">>{\n        ...pluginOptions,\n      };\n\n      if (file.isNull()) return callback(null, file);\n\n      if (file.isStream())\n        return callback(\n          new PluginError(PLUGIN_NAME, \"Streaming not supported\")\n        );\n\n      if (file.isBuffer()) {\n        if (basename(file.path).indexOf(\"_\") === 0) return callback();\n\n        if (!file.contents.length) {\n          file.path = replaceExtension(file.path, \".css\");\n\n          return callback(null, file);\n        }\n\n        options.data = file.contents.toString();\n\n        // we set the file path here so that sass can correctly resolve import paths\n        options.file = file.path;\n\n        // Ensure `indentedSyntax` is true if a `.sass` file\n        if (extname(file.path) === \".sass\") options.indentedSyntax = true;\n\n        if (!options.includePaths) options.includePaths = [];\n\n        // Ensure file's parent directory in the include path\n        options.includePaths.unshift(dirname(file.path));\n\n        // Generate Source Maps if plugin source-map present\n        if (file.sourceMap) {\n          options.sourceMap = file.path;\n          options.omitSourceMapUrl = true;\n          options.sourceMapContents = true;\n        }\n\n        // Handles error message\n        const errorHandler = (error: LegacySassError): void => {\n          const filePath =\n            (error.file === \"stdin\" ? file.path : error.file) || file.path;\n          const relativePath = relative(process.cwd(), filePath);\n          const message = [chalk.underline(relativePath), error.formatted].join(\n            \"\\n\"\n          );\n\n          error.messageFormatted = message;\n          error.messageOriginal = error.message;\n          error.message = stripAnsi(message);\n          error.relativePath = relativePath;\n\n          return callback(new PluginError(PLUGIN_NAME, error));\n        };\n\n        // Sync Sass render\n        if (sync)\n          try {\n            return callback(null, legacyHandleFile(file, renderSync(options)));\n          } catch (error) {\n            return errorHandler(error as LegacySassError);\n          }\n\n        // Async Sass render\n        return render(\n          options,\n          (error?: LegacySassError, result?: LegacyResult) => {\n            if (error) return errorHandler(error);\n\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return callback(null, legacyHandleFile(file, result!));\n          }\n        );\n      }\n    },\n  });\n\n// Log errors nicely\nfunction logError(this: Transform, error: LegacySassError): void {\n  const message = new PluginError(\n    \"sass\",\n    error.messageFormatted || \"\"\n  ).toString();\n\n  process.stderr.write(`${message}\\n`);\n  this.emit(\"end\");\n}\n\nexport type LegacySassOptions = Omit<\n  LegacyStringOptions<\"sync\">,\n  \"data\" | \"file\"\n>;\n\nexport interface LegacyGulpSass {\n  (pluginOptions?: LegacySassOptions): Transform;\n  logError(error: LegacySassError): void;\n}\n\n// Sync Sass render\nexport const legacy: LegacyGulpSass = (pluginOptions?: LegacySassOptions) =>\n  legacyMain(pluginOptions, true);\n\nlegacy.logError = logError;\n\nexport type LegacySassAsyncOptions = Omit<\n  LegacyStringOptions<\"async\">,\n  \"data\" | \"file\"\n>;\n\nexport interface LegacyGulpSassAsync {\n  (pluginOptions?: LegacySassAsyncOptions, sync?: boolean): Transform;\n  logError(error: LegacySassError): void;\n}\n\n// Main Gulp Sass function\nexport const legacyAsync: LegacyGulpSassAsync = (\n  pluginOptions?: LegacySassAsyncOptions\n) => legacyMain(pluginOptions, false);\n\nlegacyAsync.logError = logError;\n"],"names":["handleFile","file","result","sourceMap","sassMap","sassFileSrc","relative","sources","map","source","startsWith","dirname","path","fileURLToPath","replaceExtension","applySourceMap","contents","Buffer","from","css","stat","atime","mtime","ctime","Date","main","pluginOptions","sync","Transform","objectMode","transform","_enc","callback","options","isNull","isStream","PluginError","isBuffer","basename","indexOf","length","content","toString","extname","syntax","loadPaths","unshift","errorHandler","error","filePath","span","url","pathname","relativePath","process","cwd","message","chalk","underline","sassMessage","join","messageFormatted","messageOriginal","stripAnsi","compileString","compileStringAsync","then","catch","err","logError","stderr","write","this","emit","sass","sassAsync","legacyHandleFile","JSON","parse","sassMapFile","replace","sassFileSrcPath","sourceFileIndex","index","filter","src","legacyMain","data","indentedSyntax","includePaths","omitSourceMapUrl","sourceMapContents","formatted","renderSync","render","legacy","legacyAsync"],"mappings":"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"}