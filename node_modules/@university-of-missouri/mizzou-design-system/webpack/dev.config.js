const { merge } = require('webpack-merge')
const sass = require('sass')
const path = require('path')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')

const baseConfig = require('./common.config')

const scriptsConfig = merge(baseConfig, {
  mode: 'development',
  name: 'mizScripts',
  bail: false,
  devtool: 'source-map',
  entry: {
    dropdown: {
      import: './scripts/dropdown.js',
    },
    expand: {
      import: './scripts/expand.js',
    },
    toggle: {
      import: './scripts/toggle.js',
    },
    utils: {
      import: './scripts/utils.js',
    },
    primaryNavigation: {
      import: './components/Navigation/Primary/primary.js',
      filename: 'scripts/components/[name]/[name].js',
    },
  },
  output: {
    filename: 'scripts/[name]/[name].js',
    library: {
      name: 'mizScripts',
      type: 'umd',
    },
  },
})

const config = merge(baseConfig, {
  mode: 'development',
  devtool: 'source-map',
  entry: {
    images: './images.js',
    styles: './styles.js',
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: '[name].css',
    }),
  ],
  module: {
    rules: [
      {
        test: /\.(woff|woff2|eot|ttf|otf)$/i,
        type: 'asset/resource',
        generator: {
          filename: (pathData) => {
            const pathToFonts = 'src/assets/fonts/'
            const { context } = pathData.module
            const folder = context.substring(context.indexOf(pathToFonts) + pathToFonts.length)
            return `assets/fonts/${folder}/[name][ext]`
          },
        },
      },
      {
        test: /\.(png|jpg|gif|bmp|svg|ico)$/i,
        type: 'asset/resource',
        generator: {
          filename: (pathData) => {
            const pathToImages = 'src/assets/images/'
            const { context } = pathData.module
            const folder = context.substring(context.indexOf(pathToImages) + pathToImages.length)
            return `assets/images/${folder}/[name][ext]`
          },
        },
      },
      {
        test: /\.scss$/i,
        use: [
          MiniCssExtractPlugin.loader,
          { loader: 'css-loader', options: { sourceMap: true } },
          { loader: 'resolve-url-loader', options: { sourceMap: true } },
          {
            loader: 'postcss-loader',
            options: {
              sourceMap: true,
              postcssOptions: {
                plugins: [['postcss-preset-env']],
              },
            },
          },
          {
            loader: 'sass-loader',
            options: {
              sourceMap: true,
              implementation: sass,
              sassOptions: {
                includePaths: ['./src/scss', './src'],
              },
            },
          },
        ],
      },
      {
        test: /\.twig$/,
        use: [
          {
            loader: 'twig-loader',
            options: {
              twigOptions: {
                namespaces: {
                  miz: path.resolve(__dirname, './../', 'src'),
                },
              },
            },
          },
        ],
      },
    ],
  },
  optimization: {
    removeEmptyChunks: true,
    splitChunks: {
      cacheGroups: {
        scss: {
          name: (module) => {
            const moduleFileName = module
              .identifier()
              .split('/')
              .reduceRight((item) => item)
              .replace(/\.[^/.]+$/, '')

            return `assets/css/${moduleFileName}`
          },
          type: 'css/mini-extract',
          chunks: 'all',
          enforce: true,
        },
      },
    },
  },
})

module.exports = [config, scriptsConfig]
