const path = require('path')
const replace = require('buffer-replace')
const { Compilation, sources } = require('webpack')

const pluginName = 'TwigModifyWebpackPlugin'

const searchRegEx = /(?:import|include|from) [",']((?:@miz)?[a-zA-Z/.]+)[",']/g

class TwigModifyWebpackPlugin {
  // eslint-disable-next-line class-methods-use-this
  apply(compiler) {
    compiler.hooks.thisCompilation.tap(pluginName, (compilation) => {
      compilation.hooks.processAssets.tap(
        {
          name: pluginName,
          stage: Compilation.PROCESS_ASSETS_STAGE_PRE_PROCESS,
        },
        (assets) => {
          // Loop on all assets
          Object.entries(assets).forEach(([pathName, assetSource]) => {
            if (assetSource.source().constructor.name === 'Buffer') {
              // If it's a twig file, proceed
              if (pathName.includes('.twig', -1)) {
                // Get the source and change to a string
                const sourceAsString = assetSource.source().toString('utf8')
                // const matches = Array.from(sourceAsString.matchAll(searchRegEx))

                const replacedSourceAsString = sourceAsString.replaceAll(
                  searchRegEx,
                  (match, p1) => {
                    const matchSplit = p1.split('/')
                    matchSplit.forEach((pathSection, i) => {
                      matchSplit[i] = pathSection
                        .replace(/(.)([A-Z][a-z]+)/, '$1-$2')
                        .replace(/([a-z0-9])([A-Z])/, '$1-$2')
                        .toLowerCase()
                    })

                    return match.replace(p1, matchSplit.join('/').toString())
                  },
                )
                compilation.updateAsset(pathName, new sources.RawSource(replacedSourceAsString))
              }
            }
          })
        },
      )
    })
  }
}

module.exports = TwigModifyWebpackPlugin
