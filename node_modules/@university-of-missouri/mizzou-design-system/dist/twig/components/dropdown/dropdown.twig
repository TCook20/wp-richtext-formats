{#

  Dropdown
  Base dropdown component. Builds a basic dropdown component with a button and some content.

  @uses AppendClasses, AddAttributes from @miz/utilties/utils.twig
  @uses DropdownButton, DropdownContent from @miz/components/Dropdown/Dropdown.twig

  @param {object} buttonOptions
  @param {object} content_options
  @param {object} options
  @param {string} ├─ options.class
  @param {object} └─ options.attributes

 #}
{% macro Dropdown(buttonOptions, content_options, options) %}
  {%- spaceless %}

    {# Imports #}
    {% from "@miz/utilities/twig/utils.twig" import AppendClasses as appendClasses %}
    {% from "@miz/utilities/twig/utils.twig" import AddAttributes as addAttributes %}
    {% from "@miz/components/dropdown/dropdown.twig" import DropdownButton as dropdownButton %}
    {% from "@miz/components/dropdown/dropdown.twig" import DropdownContent as dropdownContent %}

    {# Parameters #}
    {% set dropdown_class = 'miz-dropdown' %}
    {% set dropdown_class = appendClasses(dropdown_class, options.class) %}
    {% set dropdown_attributes = addAttributes(options.attributes) %}

  {% endspaceless -%}

  {# Output #}
  <div class="{{ dropdown_class }}"{{ dropdown_attributes }}>
    {{ dropdownButton(buttonOptions) }}
    {{ dropdownContent(content_options) }}
  </div>

{% endmacro %}

{#

  Dropdown button

  @uses AppendClasses, AddAttributes from @miz/utilties/utils.twig
  @uses Button from @miz/components/Buttons/Button.twig

  @param {object} options
  @param {string} ├─ options.class
  @param {string} ├─ options.text
  @param {object} └─ attributes
  @param {string}    ├─ attributes.id
  @param {string}    └─ attributes.aria-haspopup

#}
{% macro DropdownButton(options) %}
  {%- spaceless %}

    {# Imports #}
    {% from "@miz/utilities/twig/utils.twig" import AppendClasses as appendClasses %}
    {% from "@miz/components/button/button.twig" import Button as button %}

    {# Parameters #}
    {% set dropdown_button_class = 'miz-dropdown__button' %}
    {% set dropdown_button_class = appendClasses(dropdown_button_class, options.class) %}
    {% set dropdown_button_text = options.text|default('Dropdown button') %}
    {% set dropdown_button_text = dropdown_button_text ~ '<i class="miz-icon material-icons miz-icon--md" aria-hidden="true">arrow_drop_down</i>' %}
    {% set optional_dropdown_button_attributes = options.attributes|default({}) %}

    {% set dropdown_button_attributes = {
      "id": "defaultDropdownButtonID",
      "aria-haspopup": "true"
    } %}

    {% set merged_dropdown_button_content_attributes = dropdown_button_attributes|merge(optional_dropdown_button_attributes) %}

    {# Variables #}
    {% set dropdown_button_options = {
      class: dropdown_button_class,
      text: dropdown_button_text,
      attributes: merged_dropdown_button_content_attributes
    } %}

  {% endspaceless -%}

  {# Output #}
  {{ button(dropdown_button_options) }}

{% endmacro %}

{#

  Dropdown content

  @uses AppendClasses, AddAttributes from @miz/utilties/utils.twig

  @param {object} options
  @param {string} ├─ options.class
  @param {string} ├─ options.content
  @param {object} └─ attributes
  @param {string}    └─ attributes.aria-labelledby

 #}
{% macro DropdownContent(options) %}
  {%- spaceless %}

    {# Imports #}
    {% from "@miz/utilities/twig/utils.twig" import AppendClasses as appendClasses %}
    {% from "@miz/utilities/twig/utils.twig" import AddAttributes as addAttributes %}

    {# Parameters #}
    {% set dropdown_content_class = 'miz-dropdown__content' %}
    {% set dropdown_content_class = appendClasses(dropdown_content_class, options.class) %}
    {% set dropdown_content_content = options.content|default('No content') %}
    {% set optional_dropdown_attributes = options.attributes|default({}) %}
    {% set dropdown_content_attributes = {
      "aria-labelledby": "defaultDropdownButtonID",
      "hidden": true
    } %}
    {% set merged_dropdown_content_attributes = dropdown_content_attributes|merge(optional_dropdown_attributes) %}

    {# Variables #}
    {% set dropdown_content_attributes = addAttributes(merged_dropdown_content_attributes) %}

  {% endspaceless -%}

  {# Output #}
  <div class="{{ dropdown_content_class }}"{{ dropdown_content_attributes }}>
    {{ dropdown_content_content }}
  </div>

{% endmacro %}

{#

  Dropdown Menu
  This is a type of Dropdown component
  @see https://www.w3.org/TR/wai-aria-practices-1.1/#menu

  @uses AppendClasses, AddAttributes, CreateMenuItemLink from @miz/utilities/twig/utils.twig
  @uses Dropdown from @miz/components/Dropdown/Dropdown.twig

  @param {object} buttonOptions
  @param {object} content_options
  @param {array}  └─ content_options.items Required
  @param {object}    └─ content_options.items.link
  @param {string}       ├─ content_options.items.link.class
  @param {string}       ├─ content_options.items.link.href
  @param {string}       └─ content_options.items.link.text
  @param {object} options
  @param {string} ├─ options.class
  @param {object} └─ attributes

  @todo Still not sure whether the menu item shouldn't be broken out into its own component. JLR

#}
{% macro DropdownMenu(buttonOptions, content_options, options = {}) %}
  {%- spaceless %}

    {# Imports #}
    {% from "@miz/utilities/twig/utils.twig" import CreateMenuItemLink as createMenuItemLink %}
    {% from "@miz/utilities/twig/utils.twig" import AppendClasses as appendClasses %}
    {% from "@miz/components/dropdown/dropdown.twig" import Dropdown as dropdown %}

    {# Parameters #}

    {# Content options #}
    {% set dropdown_menu_content_class = 'miz-dropdown-menu' %}
    {% set dropdown_menu_content_class = appendClasses(dropdown_menu_content_class, content_options.class) %}
    {% set dropdown_menu_content_items = content_options.items %}

    {# Dropdown options #}
    {% set dropdown_menu_class = 'miz-dropdown--menu' %}
    {% set dropdown_menu_class = appendClasses(dropdown_menu_class, options.class) %}

    {# Variables #}
    {% set dropdown_menu_item_link = {
      class: "miz-dropdown-item",
      href: "#",
      text: "Menu item"
    } %}

    {% set dropdown_menu_content %}
    {% for menuItem in dropdown_menu_content_items %}
      {{ createMenuItemLink(dropdown_menu_item_link|merge(menuItem.link)) }}
    {% endfor %}
    {% endset %}

    {% set dropdown_menu_content_options = {
      class: dropdown_menu_contentClass,
      content: dropdown_menu_content
    } %}

    {% set dropdown_options = {
      class: dropdown_menu_class,
      attributes: options.attributes
    } %}

    {% set content_options = content_options|merge(dropdown_menu_content_options) %}

  {% endspaceless -%}

  {# Output #}
  {{ dropdown(buttonOptions, content_options, dropdown_options) }}

{% endmacro %}
