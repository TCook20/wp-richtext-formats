"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Responsive = exports.ContentWithAside = exports.Grid = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var classnames_1 = __importDefault(require("classnames"));
var Layout_1 = require("Layout/Layout");
var Grid_1 = require("Layout/Grid/Grid");
var TestComponent = function (_a) {
    var className = _a.className;
    var testComponentClass = (0, classnames_1.default)(className);
    return ((0, jsx_runtime_1.jsxs)("div", __assign({ className: testComponentClass }, { children: [(0, jsx_runtime_1.jsx)("div", __assign({ className: 'miz-fill--black-100', style: { padding: '1rem', borderRadius: '8px' } }, { children: "Panel 1" })), (0, jsx_runtime_1.jsx)("div", __assign({ className: 'miz-fill--black-100', style: { padding: '1rem', borderRadius: '8px' } }, { children: "Panel 2" })), (0, jsx_runtime_1.jsx)("div", __assign({ className: 'miz-fill--black-100', style: { padding: '1rem', borderRadius: '8px' } }, { children: "Panel 3" })), (0, jsx_runtime_1.jsx)("div", __assign({ className: 'miz-fill--black-100', style: { padding: '1rem', borderRadius: '8px' } }, { children: "Panel 4" })), (0, jsx_runtime_1.jsx)("div", __assign({ className: 'miz-fill--black-100', style: { padding: '1rem', borderRadius: '8px' } }, { children: "Panel 5" })), (0, jsx_runtime_1.jsx)("div", __assign({ className: 'miz-fill--black-100', style: { padding: '1rem', borderRadius: '8px' } }, { children: "Panel 6" }))] })));
};
var Template = (0, Layout_1.addLayout)(function (_a) {
    var args = __rest(_a, []);
    return ((0, jsx_runtime_1.jsx)(TestComponent, __assign({}, args)));
});
exports.default = {
    title: 'Design System/Layout/New Grid',
    component: TestComponent,
    args: {
        allowLayout: true,
        advanced: false,
        layout: Grid_1.GridLayoutDefault,
    },
    argTypes: {
        allowLayout: {
            name: 'Allow layouts',
            table: {
                category: 'Layout',
                disable: true,
            },
        },
        layout: {
            name: 'Layout',
            table: {
                category: 'Layout',
            },
        },
        advanced: {
            name: 'Toggle advanced options',
            control: 'boolean',
            table: {
                category: 'Advanced',
            },
        },
        className: {
            name: 'Add CSS',
            type: 'string',
            table: {
                category: 'Advanced',
            },
            if: {
                arg: 'advanced',
            },
        },
    },
    decorators: [function (Story) { return (0, jsx_runtime_1.jsx)(Story, {}); }],
};
exports.Grid = Template.bind({});
exports.Grid.args = {
    layout: {
        name: 'testing',
        type: 'grid',
        settings: {
            columns: 2,
            gap: true,
        },
    },
};
exports.ContentWithAside = (0, Layout_1.addLayout)(function (_a) {
    var args = __rest(_a, []);
    return ((0, jsx_runtime_1.jsxs)("div", __assign({}, args, { children: [(0, jsx_runtime_1.jsxs)("article", __assign({ className: 'miz-grid__content' }, { children: [(0, jsx_runtime_1.jsx)("h2", { children: "A heading" }), (0, jsx_runtime_1.jsx)("p", { children: "Lorem ipsum dolor sit amet consectetur adipisicing elit. Iusto, debitis maiores exercitationem consequuntur sequi dolore facere facilis omnis dolor, nostrum sed temporibus at cumque molestiae accusamus dignissimos excepturi? Numquam, iusto!" }), (0, jsx_runtime_1.jsx)("h3", { children: "Lorem, ipsum dolor" }), (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsx)("li", { children: "Lorem ipsum dolor sit amet." }), (0, jsx_runtime_1.jsx)("li", { children: "Deserunt magnam saepe accusamus doloremque." }), (0, jsx_runtime_1.jsx)("li", { children: "Minima excepturi repudiandae porro perferendis?" }), (0, jsx_runtime_1.jsx)("li", { children: "Vero adipisci ut quas tempora?" })] })] })), (0, jsx_runtime_1.jsxs)("aside", __assign({ className: 'miz-grid__aside' }, { children: [(0, jsx_runtime_1.jsx)("div", __assign({ className: 'miz-card miz-card--brand' }, { children: (0, jsx_runtime_1.jsx)("div", __assign({ className: 'miz-card__body' }, { children: (0, jsx_runtime_1.jsx)("h2", __assign({ className: 'miz-card__title miz-card__title--mark' }, { children: "Card title" })) })) })), (0, jsx_runtime_1.jsx)("div", __assign({ className: 'miz-card miz-card--brand' }, { children: (0, jsx_runtime_1.jsx)("div", __assign({ className: 'miz-card__body' }, { children: (0, jsx_runtime_1.jsx)("h2", __assign({ className: 'miz-card__title miz-card__title--mark' }, { children: "Card title" })) })) }))] }))] })));
});
exports.ContentWithAside.args = {
    layout: {
        name: 'Content with Aside',
        type: 'grid',
        settings: {
            className: 'miz-grid--contain miz-grid--content-aside',
        },
    },
};
exports.Responsive = Template.bind({});
exports.Responsive.args = {
    allowLayout: true,
    layout: {
        name: 'responsive_grid_example',
        type: 'grid',
        settings: [
            {
                name: 'small_up',
                className: 'miz-grid--sm-2-up',
            },
            {
                name: 'medium_up',
                className: 'miz-grid--md-3-up',
            },
            {
                name: 'large_up',
                className: 'miz-grid--lg-4-up',
            },
        ],
    },
};
