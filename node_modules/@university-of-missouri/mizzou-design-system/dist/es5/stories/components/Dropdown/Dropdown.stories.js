"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dropdowns = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = __importDefault(require("react"));
var Dropdown_1 = __importDefault(require("Components/Dropdown/Dropdown"));
var config_json_1 = require("Components/Dropdown/config.json");
var Dropdown_html_twig_1 = __importDefault(require("Components/Dropdown/Dropdown.html.twig"));
var dropdown_1 = __importDefault(require("../../../scripts/dropdown"));
var Dropdown_mdx_1 = __importDefault(require("./Dropdown.mdx"));
// import DropdownTwig from './Dropdown.example.twig'
var Template = function (args, _a) {
    var fileTypes = _a.globals.fileTypes;
    react_1.default.useEffect(function () {
        (0, dropdown_1.default)();
    }, []);
    if (fileTypes === 'react') {
        return ((0, jsx_runtime_1.jsxs)(Dropdown_1.default, { children: [(0, jsx_runtime_1.jsx)(Dropdown_1.default.Button, { children: "I am dropdown button" }), (0, jsx_runtime_1.jsx)(Dropdown_1.default.Content, { children: "I am the content." })] }));
    }
    return (0, jsx_runtime_1.jsx)("div", { dangerouslySetInnerHTML: { __html: (0, Dropdown_html_twig_1.default)() } });
};
exports.default = {
    component: Dropdown_1.default,
    title: 'Design System/Components/Dropdowns',
    parameters: {
        docs: {
            description: {
                component: config_json_1.description,
            },
            page: Dropdown_mdx_1.default,
        },
        status: config_json_1.status,
    },
    argTypes: {
        children: {
            table: {
                category: 'Props',
            },
        },
        attributes: {
            table: {
                disable: true,
            },
        },
        primary: {
            table: {
                category: 'Options',
            },
        },
        secondary: {
            table: {
                category: 'Options',
            },
        },
        branded: {
            table: {
                category: 'Options',
            },
        },
        variant: {
            table: {
                category: 'Options',
            },
        },
        size: {
            table: {
                category: 'Options',
            },
        },
    },
};
exports.dropdowns = Template.bind({});
exports.dropdowns.args = {};
