"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var drupal_attribute_1 = __importDefault(require("drupal-attribute"));
var classnames_1 = __importDefault(require("classnames"));
var Nav_1 = require("Components/Nav/Nav");
var Button_1 = __importDefault(require("Components/Button/Button"));
var Menu_1 = __importDefault(require("Components/Menu/Menu"));
/**
 * Link for use within a NavItem
 *
 * @param attributes {DrupalAttribute} Drupal-type Attributes object
 * @param key
 * @example
 * <NavLink key={key}></NavLink>
 *
 * @returns JSX.Element
 */
var NavLink = function (_a) {
    var _b = _a.attributes, attributes = _b === void 0 ? new drupal_attribute_1.default('') : _b, key = _a.key, href = _a.href, _c = _a.children, children = _c === void 0 ? '' : _c;
    var navLinkAttributes = {
        className: (0, classnames_1.default)('miz-nav__link', attributes.get('class')),
    };
    attributes.forEach(function (value, att) {
        if (att === 'class') {
            navLinkAttributes.className = value.join(' ');
        }
        else {
            navLinkAttributes[att] = value;
        }
    });
    return ((0, jsx_runtime_1.jsx)("a", __assign({ href: href }, navLinkAttributes, { children: children }), key));
};
var NavButton = function (_a) {
    var _b = _a.attributes, attributes = _b === void 0 ? new drupal_attribute_1.default('') : _b, children = _a.children;
    var iClicked = function () {
        return console.log('clicked');
    };
    return ((0, jsx_runtime_1.jsxs)(Button_1.default, __assign({ attributes: attributes.addClass('miz-nav__button', 'miz-dropdown__button'), onClick: iClicked }, { children: [children, (0, jsx_runtime_1.jsx)("i", __assign({ className: "miz-icon material-icons miz-icon--md", "aria-hidden": "true" }, { children: "arrow_drop_down" }))] })));
};
var NavContent = function (_a) {
    var _b = _a.attributes, attributes = _b === void 0 ? new drupal_attribute_1.default('') : _b, content = _a.content;
    var listItems = Object.entries(content).map(function (item, i) {
        switch (item[0]) {
            case 'link':
                return ((0, jsx_runtime_1.jsx)(NavLink, __assign({ attributes: attributes, href: item[1].href }, { children: item[1].text }), i));
            case 'button':
                return ((0, jsx_runtime_1.jsx)(NavButton, __assign({ attributes: new drupal_attribute_1.default('').addClass('miz-nav__link') }, { children: item[1].content }), i));
            case 'list':
                return ((0, jsx_runtime_1.jsx)(Nav_1.NavList, { list: item[1], attributes: new drupal_attribute_1.default('').addClass('miz-nav__sub-list') }));
            case 'menu':
                return ((0, jsx_runtime_1.jsx)(Menu_1.default, {})
                // <NavList
                //   list={item[1]}
                //   attributes={new DrupalAttribute('').addClass('miz-nav__sub-list')}
                // />
                );
            default:
                return (0, jsx_runtime_1.jsx)("li", { children: "An unknown" }, i);
        }
    });
    return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: listItems });
};
exports.default = NavContent;
