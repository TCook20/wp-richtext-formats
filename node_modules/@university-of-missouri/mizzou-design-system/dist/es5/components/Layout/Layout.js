"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addLayout = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var classnames_1 = __importDefault(require("classnames"));
require("./_layout.scss");
function addLayout(WrappedComponent) {
    var componentWithLayout = function (_a) {
        var className = _a.className, allowLayout = _a.allowLayout, layout = _a.layout, props = __rest(_a, ["className", "allowLayout", "layout"]);
        var addLayoutClass = function (layout) {
            var _a;
            switch (layout.type) {
                case 'grid':
                    if (Array.isArray(layout.settings)) {
                        return (0, classnames_1.default)('miz-grid', layout.settings.map(function (setting) { return setting.className; }));
                    }
                    else {
                        return (0, classnames_1.default)('miz-grid', (_a = {
                                'miz-grid--no-gap': layout.settings.gap === false
                            },
                            _a["miz-grid--".concat(layout.settings.columns, "-up")] = layout.settings.columns,
                            _a), layout.settings.className);
                    }
                case 'flex':
                    return (0, classnames_1.default)('miz-flex', {
                        'miz-flex--gap': layout.gap,
                    });
            }
        };
        if (allowLayout) {
            var layoutClass = (0, classnames_1.default)(addLayoutClass(layout), className);
            return ((0, jsx_runtime_1.jsx)(WrappedComponent, __assign({}, props, { className: layoutClass })));
        }
        return (0, jsx_runtime_1.jsx)(WrappedComponent, __assign({}, props));
    };
    return componentWithLayout;
}
exports.addLayout = addLayout;
