"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IconSvg = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var classnames_1 = __importDefault(require("classnames"));
var drupal_attribute_1 = __importDefault(require("drupal-attribute"));
var Icon = function (_a) {
    var _b;
    var _c = _a.attributes, attributes = _c === void 0 ? new drupal_attribute_1.default('') : _c, name = _a.name, _d = _a.size, size = _d === void 0 ? 'md' : _d, _e = _a.color, color = _e === void 0 ? 'black' : _e;
    var IconAttributes = {
        className: (0, classnames_1.default)('miz-icon', 'material-icons', (_b = {},
            _b["miz-icon--".concat(size)] = size,
            _b["miz-text--".concat(color)] = color !== 'black',
            _b), attributes.get('class')),
    };
    attributes.forEach(function (value, key) {
        if (key !== 'class') {
            IconAttributes[key] = value;
        }
    });
    return (0, jsx_runtime_1.jsx)("i", __assign({}, IconAttributes, { children: name }));
};
exports.default = Icon;
var IconSvg = function (_a) {
    var _b;
    var _c = _a.attributes, attributes = _c === void 0 ? new drupal_attribute_1.default('') : _c, name = _a.name, _d = _a.xlink, xlink = _d === void 0 ? '/images/icons/svg/sprite.symbol.svg' : _d, _e = _a.size, size = _e === void 0 ? 'md' : _e, _f = _a.color, color = _f === void 0 ? 'black' : _f;
    var IconSvgAttributes = {
        className: (0, classnames_1.default)('miz-icon', 'miz-icon__svg', (_b = {},
            _b["miz-icon--".concat(size)] = size,
            _b["miz-svg--".concat(color)] = color !== 'black',
            _b), attributes.get('class')),
        'aria-hidden': true,
    };
    attributes.forEach(function (value, key) {
        if (key !== 'class') {
            IconSvgAttributes[key] = value;
        }
    });
    return ((0, jsx_runtime_1.jsx)("svg", __assign({}, IconSvgAttributes, { children: (0, jsx_runtime_1.jsx)("use", { xlinkHref: "".concat(xlink, "#").concat(name) }) })));
};
exports.IconSvg = IconSvg;
