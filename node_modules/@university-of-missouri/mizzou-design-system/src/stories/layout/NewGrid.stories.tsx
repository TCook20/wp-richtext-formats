/**
 * @format
 */
import React from 'react'
import { ComponentMeta, ComponentStory } from '@storybook/react'
import classNames from 'classnames'

import { ComponentWithLayout, addLayout } from 'Layout/Layout'
import { GridLayout, GridLayoutDefault } from 'Layout/Grid/Grid'

const TestComponent = ({ className }) => {
  const testComponentClass = classNames(className)

  return (
    <div className={testComponentClass}>
      <div
        className='miz-fill--black-100'
        style={{ padding: '1rem', borderRadius: '8px' }}
      >
        Panel 1
      </div>
      <div
        className='miz-fill--black-100'
        style={{ padding: '1rem', borderRadius: '8px' }}
      >
        Panel 2
      </div>
      <div
        className='miz-fill--black-100'
        style={{ padding: '1rem', borderRadius: '8px' }}
      >
        Panel 3
      </div>
      <div
        className='miz-fill--black-100'
        style={{ padding: '1rem', borderRadius: '8px' }}
      >
        Panel 4
      </div>
      <div
        className='miz-fill--black-100'
        style={{ padding: '1rem', borderRadius: '8px' }}
      >
        Panel 5
      </div>
      <div
        className='miz-fill--black-100'
        style={{ padding: '1rem', borderRadius: '8px' }}
      >
        Panel 6
      </div>
    </div>
  )
}

const Template: ComponentStory<any> = addLayout<ComponentWithLayout<GridLayout>>(({ ...args }) => (
  <TestComponent {...args} />
))

export default {
  title: 'Design System/Layout/New Grid',
  component: TestComponent,
  args: {
    allowLayout: true,
    advanced: false,
    layout: GridLayoutDefault,
  },
  argTypes: {
    allowLayout: {
      name: 'Allow layouts',
      table: {
        category: 'Layout',
        disable: true,
      },
    },
    layout: {
      name: 'Layout',
      table: {
        category: 'Layout',
      },
    },
    advanced: {
      name: 'Toggle advanced options',
      control: 'boolean',
      table: {
        category: 'Advanced',
      },
    },
    className: {
      name: 'Add CSS',
      type: 'string',
      table: {
        category: 'Advanced',
      },
      if: {
        arg: 'advanced',
      },
    },
  },
  decorators: [(Story) => <Story />],
} as ComponentMeta<typeof TestComponent>

export const Grid = Template.bind({})
Grid.args = {
  layout: {
    name: 'testing',
    type: 'grid',
    settings: {
      columns: 2,
      gap: true,
    },
  },
} as ComponentWithLayout<GridLayout>

export const ContentWithAside: ComponentStory<any> = addLayout<ComponentWithLayout<GridLayout>>(
  ({ ...args }) => (
    <div {...args}>
      <article className='miz-grid__content'>
        <h2>A heading</h2>
        <p>
          Lorem ipsum dolor sit amet consectetur adipisicing elit. Iusto, debitis maiores
          exercitationem consequuntur sequi dolore facere facilis omnis dolor, nostrum sed
          temporibus at cumque molestiae accusamus dignissimos excepturi? Numquam, iusto!
        </p>
        <h3>Lorem, ipsum dolor</h3>
        <ul>
          <li>Lorem ipsum dolor sit amet.</li>
          <li>Deserunt magnam saepe accusamus doloremque.</li>
          <li>Minima excepturi repudiandae porro perferendis?</li>
          <li>Vero adipisci ut quas tempora?</li>
        </ul>
      </article>
      <aside className='miz-grid__aside'>
        <div className='miz-card miz-card--brand'>
          <div className='miz-card__body'>
            <h2 className='miz-card__title miz-card__title--mark'>Card title</h2>
          </div>
        </div>
        <div className='miz-card miz-card--brand'>
          <div className='miz-card__body'>
            <h2 className='miz-card__title miz-card__title--mark'>Card title</h2>
          </div>
        </div>
      </aside>
    </div>
  ),
)
ContentWithAside.args = {
  layout: {
    name: 'Content with Aside',
    type: 'grid',
    settings: {
      className: 'miz-grid--contain miz-grid--content-aside',
    },
  },
} as ComponentWithLayout<GridLayout>

export const Responsive = Template.bind({})
Responsive.args = {
  allowLayout: true,
  layout: {
    name: 'responsive_grid_example',
    type: 'grid',
    settings: [
      {
        name: 'small_up',
        className: 'miz-grid--sm-2-up',
      },
      {
        name: 'medium_up',
        className: 'miz-grid--md-3-up',
      },
      {
        name: 'large_up',
        className: 'miz-grid--lg-4-up',
      },
    ],
  },
} as ComponentWithLayout<GridLayout>
