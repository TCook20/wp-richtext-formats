@use 'sass:math';
@use 'sass:color';
@import 'tokens/tokens';
@import 'base/variables';
@import 'mixins/breakpoints';

@mixin gridlines($bg_color: $miz-blue-100, $pinstripe_thickness: 32px, $columns: 12) {
  background: linear-gradient(to right, $bg_color calc(100% - #{$pinstripe_thickness}), color.adjust($color: $bg_color, $lightness: -5%) calc(100% - #{$pinstripe_thickness}) 100%) left top / calc((100% + #{$pinstripe_thickness}) / #{$columns})  100%;
}

.miz-grid {
  @supports (display: grid) {
    display: grid;

    /* stylelint-disable plugin/no-unsupported-browser-features */
    grid-template-columns: [main-start] repeat(12, 1fr) [main-end];
    grid-template-rows: auto;
    grid-gap: $miz-grid-gutter-width;

    /* By default, anything placed in the grid fills the horizontal space */
    > * {
      grid-column: 1 / span all;
    }
    /* stylelint-enable */
  }
}

@supports (display: grid) {
  .miz-grid--contain {
    /* stylelint-disable plugin/no-unsupported-browser-features */
    grid-template-columns:
      [full-start] (math.div($miz-grid-gutter-width, 2))
      [main-start] repeat(12, 1fr) [main-end] (math.div($miz-grid-gutter-width, 2))
      [full-end];
    gap: 0;

    @include media-breakpoint-up(sm) {
      grid-template-columns:
        [full-start] minmax(0, 1fr)
        [main-start] repeat(12, 13px) [main-end]
        minmax(0, 1fr) [full-end];
      grid-gap: 0 $miz-grid-gutter-width;
    }

    @include media-breakpoint-up(md) {
      grid-template-columns:
        [full-start] minmax(0, 1fr)
        [main-start] repeat(12, 28px) [main-end]
        minmax(0, 1fr) [full-end];
    }

    @include media-breakpoint-up(lg) {
      grid-template-columns:
        [full-start] minmax(0, 1fr)
        [main-start] repeat(12, 48px) [main-end]
        minmax(0, 1fr) [full-end];
    }

    @include media-breakpoint-up(xl) {
      grid-template-columns:
        [full-start] minmax(0, 1fr)
        [main-start] repeat(12, minmax(65px, 68px)) [main-end]
        minmax(0, 1fr) [full-end];
    }
    /* stylelint-enable */
  }
}

.miz-grid--show-grid {
  @include gridlines;
}

.miz-grid--no-gap {
  grid-gap: 0;
}

.miz-grid--2-up {
  @include media-breakpoint-up(md) {
    > * {
      grid-column: span 6;
    }
  }
}

.miz-grid--3-up {
  @include media-breakpoint-up(md) {
    > * {
      grid-column: span 4;
    }
  }
}

.miz-grid--4-up {
  @include media-breakpoint-up(lg) {
    > * {
      grid-column: span 3;
    }
  }
}

@each $name, $width in $miz-grid-breakpoints {
  .miz-grid--#{$name}-2-up {
    @include media-breakpoint-up($name) {
      > * {
        grid-column: span 6;
      }
    }
  }
}

@each $name, $width in $miz-grid-breakpoints {
  .miz-grid--#{$name}-3-up {
    @include media-breakpoint-up($name) {
      > * {
        grid-column: span 4;
      }
    }
  }
}

@each $name, $width in $miz-grid-breakpoints {
  .miz-grid--#{$name}-4-up {
    @include media-breakpoint-up($name) {
      > * {
        grid-column: span 3;
      }
    }
  }
}

.miz-grid--2-1 {
  @include media-breakpoint-up(md) {
    > :nth-child(2n+1) {
      grid-column: 1 / span 8;
    }

    > :nth-child(2n) {
      grid-column: 9 / span all;
    }
  }
}

@each $name, $width in $miz-grid-breakpoints {
  .miz-grid--#{$name}-2-1 {
    @include media-breakpoint-up($name) {
      > :nth-child(2n+1) {
        grid-column: 1 / span 8;
      }

      > :nth-child(2n) {
        grid-column: 9 / span all;
      }
    }
  }
}

.miz-grid--1-2 {
  @include media-breakpoint-up(md) {
    > :nth-child(2n+1) {
      grid-column: 1 / span 4;
    }

    > :nth-child(2n) {
      grid-column: 5 / span all;
    }
  }
}

@each $name, $width in $miz-grid-breakpoints {
  .miz-grid--#{$name}-4-up {
    @include media-breakpoint-up($name) {
      > * {
        grid-column: span 3;
      }
    }
  }
}
