/**
 * @format
 */
import React from 'react'
import classNames from 'classnames'

import './_layout.scss'
import { GridLayout } from './Grid/Grid'
import { FlexLayout } from './Flex/Flex'

type BlockLayout = {
  type: 'block'
  settings?: null
}

type LayoutSettings = GridLayout | FlexLayout | BlockLayout

export interface ComponentWithLayout<T> extends React.BaseHTMLAttributes<HTMLDivElement> {
  allowLayout: boolean
  layout?: Extract<LayoutSettings, T>
}

function addLayout<T extends React.BaseHTMLAttributes<HTMLDivElement>>(
  WrappedComponent: React.ElementType,
) {
  const componentWithLayout = ({
    className,
    allowLayout,
    layout,
    ...props
  }: ComponentWithLayout<T>) => {
    const addLayoutClass = (layout: LayoutSettings) => {
      switch (layout.type) {
        case 'grid':
          if (Array.isArray(layout.settings)) {
            return classNames(
              'miz-grid',
              layout.settings.map((setting) => setting.className),
            )
          } else {
            return classNames(
              'miz-grid',
              {
                'miz-grid--no-gap': layout.settings.gap === false,
                [`miz-grid--${layout.settings.columns}-up`]: layout.settings.columns,
              },
              layout.settings.className,
            )
          }
        case 'flex':
          return classNames('miz-flex', {
            'miz-flex--gap': layout.gap,
          })
      }
    }

    if (allowLayout) {
      const layoutClass = classNames(addLayoutClass(layout), className)

      return (
        <WrappedComponent
          {...(props as T)}
          className={layoutClass}
        />
      )
    }

    return <WrappedComponent {...(props as T)} />
  }

  return componentWithLayout
}

export { addLayout }
