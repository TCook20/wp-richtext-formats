import React from 'react'
import DrupalAttribute from 'drupal-attribute'
import classNames from 'classnames'

import NavContent from './NavContent'

interface NavItemProps {
  attributes?: DrupalAttribute
  item: any
}
const NavItem = ({ attributes = new DrupalAttribute(''), item }: NavItemProps): JSX.Element => {
  const navItemAttributes: Record<string, unknown> = {
    className: classNames('miz-nav__list-item', attributes.get('class')),
  }

  attributes.forEach((value, att) => {
    if (att === 'class') {
      navItemAttributes.className = value.join(' ')
    } else {
      navItemAttributes[att] = value
    }
  })

  return (
    <li {...navItemAttributes}>
      <NavContent content={item} />
    </li>
  )
}

export interface NavListProps {
  attributes?: DrupalAttribute
  list: any
}
export const NavList = ({
  attributes = new DrupalAttribute(''),
  list,
}: NavListProps): JSX.Element => {
  const navListAttributes: Record<string, unknown> = {
    className: classNames('miz-nav__list', attributes.get('class')),
  }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      navListAttributes[key] = value
    }
  })

  return (
    <ul {...navListAttributes}>
      {list.items.map((item: NavItemProps, i: number) => {
        return <NavItem key={i} item={item} />
      })}
    </ul>
  )
}

export interface NavProps {
  attributes?: DrupalAttribute
  list: any
}
const Nav = ({ attributes = new DrupalAttribute(''), ...list }: NavProps): JSX.Element => {
  const NavAttributes: Record<string, unknown> = {
    className: classNames('miz-nav', attributes.get('class')),
  }

  attributes.forEach((value, att) => {
    if (att === 'class') {
      NavAttributes.className = value.join(' ')
    } else {
      NavAttributes[att] = value
    }
  })

  return (
    <nav {...NavAttributes}>
      <NavList {...list} />
    </nav>
  )
}

export default Nav
