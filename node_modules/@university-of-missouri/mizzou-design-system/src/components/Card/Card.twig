{#
  Card
  Base Card component.
  @see    https://getbootstrap.com/docs/4.2/components/card/
  @see    https://designsystem.missouri.edu/components/detail/cards.html

  @uses   AppendClasses, AddAttributes from @miz/utilties/utils.twig
  @uses   CardContents from @miz/components/Card/Card.twig

  @param  {object}    options
  @param  {string}    ├─ options.class
  @param  {object}    ├─ options.attributes
  @param  {string}    ├─ options.contents   Value is passed to the CardContents macro for handling. See CardContents for param details.
  @param  {array}     └─ options.contents[]

 #}
{% macro Card(options) %}
  {%- spaceless %}

    {# Imports #}
    {% import "@miz/utilities/twig/utils.twig" as utils %}
    {% from "@miz/components/Card/Card.twig" import CardContent as cardContent %}

    {# Parameters #}
    {% set card_class = 'miz-card' %}
    {% set card_class = options.class ? utils.AppendClasses(card_class, options.class) : card_class %}
    {% set card_attributes = options.attributes ? utils.AddAttributes(options.attributes) %}
    {% set card_contents = options.contents %}

  {% endspaceless -%}

  {# Output #}
  <div class="{{ card_class }}"{{ card_attributes }}>
    {{- cardContent(card_contents) -}}
  </div>

{% endmacro %}

{#
  Card Content
  Handles and outputs most Card content blocks. Returns a string containing content for a single Card or Card Body.
  @see    See Content type macros for other options available.

  @uses   CardBody, CardTitle, CardSubtitle, Card_text_cfrom @miz/components/Card/Card.twig
  @usedby Card, CardBody from @miz/components/Card/Card.twig

  @param  {string}    contents Can contain either a string, which is simply output as-is OR
  @param  {array}     contents[] An array of strings OR objects that are iterated over and handled through specific content type macros.
  @param  {string}    ├─ contents[].type     - required 'body'|'title'|'subtitle'|'text'
  @param  {string}    └─ contents[].content  - Depending on the kind of content type referenced in the 'type' key, different values may be required. See accompanying macro for more information and available options.

  @return {string}  Returns a string containing the content for a single Card or Card Body.

 #}
{% macro CardContent(contents) %}
  {% spaceless %}

    {# Imports #}
    {% from "@miz/components/Card/Card.twig" import CardBody as cardBody %}
    {% from "@miz/components/Card/Card.twig" import CardLinkContainer as cardLinkContainer %}
    {% from "@miz/components/Card/Card.twig" import CardTitle as cardTitle %}
    {% from "@miz/components/Card/Card.twig" import CardSubtitle as cardSubtitle %}
    {% from "@miz/components/Card/Card.twig" import CardText as cardText %}
    {% from "@miz/components/Card/Card.twig" import CardImage as cardImage %}
    {% from "@miz/components/Card/Card.twig" import CardLinks as cardLinks %}

    {# Parameters #}
    {% set card_contents = contents %}

  {% endspaceless %}

  {# Variables #}

    {%- if card_contents is iterable %}

      {# Loop through content objects #}
      {%- for content in card_contents -%}

        {%- if content.type == 'body' %}
          {{ cardBody(content) }}
        {%- elseif content.type == 'title' %}
          {{ cardTitle(content) }}
        {%- elseif content.type == 'subtitle' %}
          {{ cardSubtitle(content) }}
        {%- elseif content.type == 'text' %}
          {{ cardText(content) }}
        {%- elseif content.type == 'image' %}
          {{ cardImage(content) }}
        {%- elseif content.type == 'links' %}
          {{ cardLinkContainer(content) }}
        {%- elseif content.type == 'link' %}
          {{ cardLinks(content) }}
        {%- else -%}
          {{ content|raw }}
        {%- endif %}

      {% endfor %}

    {% else %}
      {{ card_contents }}
    {% endif %}

{% endmacro %}

{#
  Card Body
  Returns a Card Body content type.

  @uses   AppendClasses, AddAttributes from @miz/utilities/twig/utils.twig
  @uses   CardContents from @miz/components/Card/Card.twig
  @usedby CardContents from @miz/components/Card/Card.twig

  @param  {object}    options
  @param  {string}    ├─ options.class
  @param  {object}    ├─ options.attributes
  @param  {string}    ├─ options.content    Can contain either a string OR an object. Strings are output as-is with no handling.
  @param  {array}     └─ options.content[]  An array of strings OR objects that are iterated over and handled through specific content type macros.

 #}
{% macro CardBody(options) %}
  {%- spaceless %}

    {# Imports #}
    {% import "@miz/utilities/twig/utils.twig" as utils %}
    {% from "@miz/components/Card/Card.twig" import CardContent as cardContent %}

    {# Parameters #}
    {% set card_body_class = "miz-card__body" %}
    {% set card_body_class = options.class ? utils.AppendClasses(card_body_class, options.class) : card_body_class %}
    {% set card_body_attributes = options.attributes ? utils.AddAttributes(options.attributes) %}
    {% set card_body_contents = options.contents %}

  {% endspaceless -%}

  {# Output #}
  <div class="{{ card_body_class }}"{{ card_body_attributes }}>
    {{ cardContent(card_body_contents) }}
  </div>

{% endmacro %}

{#
  Card Title
  Returns a Card Title content type

  @uses   AppendClasses, AddAttributes from @miz/utilties/utils.twig
  @usedby CardContents from @miz/components/Card/Card.twig

  @param  {object}    options
  @param  {string}    ├─ options.class
  @param  {object}    ├─ options.attributes
  @param  {string}    └─ options.content

  @todo   Possibly add an option for defining the element used if an explicit one is too limiting.

 #}
{% macro CardTitle(options) %}
  {%- spaceless %}

    {# Imports #}
    {% import "@miz/utilities/twig/utils.twig" as utils %}

    {# Parameters #}
    {% set card_title_class = "miz-card__title" %}
    {% set card_title_class = options.class ? utils.AppendClasses(card_title_class, options.class) : card_title_class %}
    {% set card_title_attributes = options.attributes ? utils.AddAttributes(options.attributes) %}
    {% set card_title_content = options.content ? options.content : false %}
    {% set card_title_link = options.link is defined ? options.link : false %}

  {% endspaceless -%}

  {# Output #}
  {% if card_title_content and card_title_link %}
    <h2 class="{{ card_title_class }}"{{ card_title_attributes }}>
      <a href="#" class="miz-card__title-link">{{ card_title_content }}</a>
    </h2>
  {% elseif card_title_content %}
    <h2 class="{{ card_title_class }}"{{ card_title_attributes }}>{{ card_title_content }}</h2>
  {% endif %}
{% endmacro %}

{#
  Card Subtitle
  Returns a Card Subtitle content type

  @uses   AppendClasses, AddAttributes from @miz/utilties/utils.twig
  @usedby CardContents from @miz/components/Card/Card.twig

  @param  {object}    options
  @param  {string}    ├─ options.class
  @param  {object}    ├─ options.attributes
  @param  {string}    └─ options.content

  @todo   Possibly add an option for defining the element used if an explicit one is too limiting.

#}
{% macro CardSubtitle(options) %}
  {%- spaceless %}

    {# Imports #}
    {% import "@miz/utilities/twig/utils.twig" as utils %}

    {# Parameters #}
    {% set card_subtitle_class = "miz-card__subtitle" %}
    {% set card_subtitle_class = options.class ? utils.AppendClasses(card_subtitle_class, options.class) : card_subtitle_class %}
    {% set card_subtitle_attributes = options.attributes ? utils.AddAttributes(options.attributes) %}
    {% set card_subtitle_content = options.content ? options.content : false %}

  {% endspaceless -%}

  {# Output #}
  {% if card_subtitle_content %}
    <h3 class="{{ card_subtitle_class }}"{{ card_subtitle_attributes }}>
      {{- card_subtitle_content -}}
    </h3>
  {% endif %}
{% endmacro %}

{#
  Card Text
  Returns a Card Text content type

  @uses   AppendClasses, AddAttributes from @miz/utilties/utils.twig
  @usedby CardContents from @miz/components/Card/Card.twig

  @param  {object}    options
  @param  {string}    ├─ options.class
  @param  {object}    ├─ options.attributes
  @param  {object}    └─ options.content

  @todo   Possibly add an option for defining the element used if an explicit one is too limiting.

#}
{% macro CardText(options) %}
  {%- spaceless %}

    {# Imports #}
    {% import "@miz/utilities/twig/utils.twig" as utils %}

    {# Parameters #}
    {% set card_text_class = "miz-card__text" %}
    {% set card_text_class = options.class ? utils.AppendClasses(card_text_class, options.class) : card_text_class %}
    {% set card_text_attributes = options.attributes ? utils.AddAttributes(options.attributes) %}
    {% set card_text_content = options.content ? options.content : false %}

  {% endspaceless -%}

  {# Output #}
  {% if card_text_content %}
    <p class="{{ card_text_class }}"{{ card_text_attributes }}>
      {{- card_text_content -}}
    </p>
  {% endif %}
{% endmacro %}

{#
  Card Link Container
  Returns a Card Link to place content inside, much like a card body.

  @uses   AppendClasses, AddAttributes from @miz/utilities/twig/utils.twig
  @uses   CardContents from @miz/components/Card/Card.twig
  @usedby CardContents from @miz/components/Card/Card.twig

  @param  {object}    options
  @param  {string}    ├─ options.class
  @param  {object}    ├─ options.attributes
  @param  {string}    ├─ options.href       Link to be placed inside the <a href=""> value.
  @param  {string}    ├─ options.content    Can contain either a string OR an object. Strings are output as-is with no handling.
  @param  {array}     └─ options.content[]  An array of strings OR objects that are iterated over and handled through specific content type macros.

 #}
{% macro CardLinkContainer(options) %}
  {%- spaceless %}

    {# Imports #}
    {% import "@miz/utilities/twig/utils.twig" as utils %}
    {% from "@miz/components/Card/Card.twig" import CardLinks as cardLink %}

    {# Parameters #}
    {% set card_link_container_class = "miz-card__links" %}
    {% set card_link_container_class = options.class ? utils.AppendClasses(card_link_container_class, options.class) : card_link_container_class %}
    {% set card_link_container_attributes = options.attributes ? utils.AddAttributes(options.attributes) %}
    {% set card_link_container_content = options.content %}

  {% endspaceless -%}

  {# Output #}
  <div class="{{ card_link_container_class }}"{{ card_link_container_attributes }}>

    {% for card_link in card_link_container_content if card_link_container_content is iterable %}
      {{ cardLink(card_link) }}
    {% endfor %}

    {# {{ card_link_container_content }} #}

  </div>

{% endmacro %}

{#
  Card Links
  Returns a Card Link content type

  @uses   AppendClasses, AddAttributes from @miz/utilties/utils.twig
  @usedby CardContents from @miz/components/Card/Card.twig

  @param  {object}    options
  @param  {string}    ├─ options.class
  @param  {object}    ├─ options.attributes
  @param  {array}     └─ options.links

  @todo   Possibly add an option for defining the element used if an explicit one is too limiting.

#}
{% macro CardLinks(options) %}
  {%- spaceless %}

    {# Imports #}
    {% import "@miz/utilities/twig/utils.twig" as utils %}

    {# Parameters #}
    {% set card_link_class = "miz-card__link" %}
    {% set card_link_class = options.class ? utils.AppendClasses(card_link_class, options.class) : card_link_class %}
    {% set card_link_attributes = options.attributes ? utils.AddAttributes(options.attributes) %}
    {% set card_link_href = options.href ? options.href %}
    {% set card_link_text = options.text ? options.text %}

  {% endspaceless -%}

  {# Output #}
  <a href="{{ card_link_href }}" class="{{ card_link_class }}"{{ card_link_attributes }}>{{ card_link_text }}</a>

{% endmacro %}

{#
  Card Image
  Returns a Card Image content type

  @uses   AppendClasses, AddAttributes from @miz/utilties/utils.twig
  @usedby CardContents from @miz/components/Card/Card.twig

  @param  {object}    options
  @param  {string}    ├─ options.class
  @param  {object}    ├─ options.attributes
  @param  {string}    ├─ options.src
  @param  {string}    └─ options.alt

#}
{% macro CardImage(options) %}
  {%- spaceless %}

    {# Imports #}
    {% import "@miz/utilities/twig/utils.twig" as utils %}

    {# Parameters #}
    {% set card_image_class = "miz-card__image" %}
    {% set card_image_class = options.class ? utils.AppendClasses(card_image_class, options.class) : card_image_class %}
    {% set card_image_attributes = options.attributes ? utils.AddAttributes(options.attributes) %}
    {% set card_image_src = options.src ? options.src : "" %}
    {% set card_image_alt = options.alt ? options.alt : "No alt text provided." %}

  {% endspaceless -%}

  {# Output #}
  <img class="{{ card_image_class }}" src="{{ card_image_src }}" alt="{{ card_image_alt }}"{{ card_image_attributes }}>
{% endmacro %}

{#
  Card Group
  Returns a Card Group

  @uses   AppendClasses, AddAttributes from @miz/utilties/utils.twig
  @usedby CardContents from @miz/components/Card/Card.twig

  @param  {object}    options
  @param  {string}    ├─ options.class
  @param  {object}    ├─ options.attributes
  @param  {array}     └─ options.items

#}
{% macro CardGroup(options) %}
  {%- spaceless %}

    {# Imports #}
    {% import "@miz/utilities/twig/utils.twig" as utils %}
    {% from '@miz/components/Card/Card.twig' import Card as card %}

    {# Parameters #}
    {% set card_group_class = 'miz-card-group' %}
    {% set card_group_class = options.class ? utils.AppendClasses(card_group_class, options.class) : card_group_class %}
    {% set card_group_attributes = options.attributes ? utils.AddAttributes(options.attributes) %}
    {% set card_group_items = options.items %}

  {% endspaceless -%}

  {# Output #}
  <div class="{{ card_group_class }}"{{ card_group_attributes }}>
    {% for item in card_group_items %}
      {{ card(item) }}
    {% endfor %}
  </div>
{% endmacro %}
