import React from 'react'
import DrupalAttribute from 'drupal-attribute'
import classNames from 'classnames'
import { ElementAttributes } from 'Components/Base/BaseElement'

export interface CardImageProps extends ElementAttributes {
  src: string
  alt: string
}

export const CardImage = ({
  attributes = new DrupalAttribute(''),
  src,
  alt,
}: CardImageProps): JSX.Element => {
  const CardImageAttributes = {
    className: classNames('miz-card__image', attributes.get('class')),
  }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      CardImageAttributes[key] = value
    }
  })

  return <img {...CardImageAttributes} src={src} alt={alt} />
}

export interface CardTitleProps extends ElementAttributes {
  children: React.ReactNode
}

export const CardTitle = ({
  attributes = new DrupalAttribute(''),
  children = 'Card Title',
}: CardTitleProps): JSX.Element => {
  const CardTitleAttributes = {
    className: classNames('miz-card__title', attributes.get('class')),
  }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      CardTitleAttributes[key] = value
    }
  })

  return <h2 {...CardTitleAttributes}>{children}</h2>
}

export interface CardSubtitleProps extends ElementAttributes {
  children: React.ReactNode
}

export const CardSubtitle = ({
  attributes = new DrupalAttribute(''),
  children,
}: CardSubtitleProps): JSX.Element => {
  const CardSubtitleAttributes = {
    className: classNames('miz-card__subtitle', attributes.get('class')),
  }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      CardSubtitleAttributes[key] = value
    }
  })

  return <h3 {...CardSubtitleAttributes}>{children}</h3>
}

export interface CardTextProps extends ElementAttributes {
  children: React.ReactNode
}

export const CardText = ({
  attributes = new DrupalAttribute(''),
  children,
}: CardTextProps): JSX.Element => {
  const CardTextAttributes = {
    className: classNames('miz-card__text', attributes.get('class')),
  }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      CardTextAttributes[key] = value
    }
  })

  return <p {...CardTextAttributes}>{children}</p>
}

export interface CardLinkProps extends ElementAttributes {
  children: React.ReactNode
  href: string
}

export const CardLink = ({
  attributes = new DrupalAttribute(''),
  children,
  href,
}: CardLinkProps): JSX.Element => {
  const CardLinkAttributes = {
    className: classNames('miz-card__link', attributes.get('class')),
    href,
  }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      CardLinkAttributes[key] = value
    }
  })

  return <a {...CardLinkAttributes}>{children}</a>
}

export interface CardLinksProps extends ElementAttributes {
  children?: React.ReactNode
  links: any
}

export const CardLinks = ({
  attributes = new DrupalAttribute(''),
  links,
}: CardLinksProps): JSX.Element => {
  const CardLinksAttributes = {
    className: classNames('miz-card__links', attributes.get('class')),
  }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      CardLinksAttributes[key] = value
    }
  })

  let linksGroup

  if (links) {
    linksGroup = links.map((link, i) => (
      <CardLink href={link.href} key={i}>
        {link.text}
      </CardLink>
    ))
  }

  return <div {...CardLinksAttributes}>{linksGroup}</div>
}

export interface CardHeaderProps extends ElementAttributes {
  children: React.ReactNode
}

export const CardHeader = ({
  attributes = new DrupalAttribute(''),
  children,
}: CardHeaderProps): JSX.Element => {
  const CardHeaderAttributes = {
    className: classNames('miz-card__header', attributes.get('class')),
  }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      CardHeaderAttributes[key] = value
    }
  })

  return <div {...CardHeaderAttributes}>{children}</div>
}

export interface CardBodyProps extends ElementAttributes {
  children: React.ReactNode
}

export const CardBody = ({
  attributes = new DrupalAttribute(''),
  children,
}: CardBodyProps): JSX.Element => {
  const CardBodyAttributes = {
    className: classNames('miz-card__body', attributes.get('class')),
  }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      CardBodyAttributes[key] = value
    }
  })

  return <div {...CardBodyAttributes}>{children}</div>
}

export interface CardFooterProps extends ElementAttributes {
  children: React.ReactNode
}

export const CardFooter = ({
  attributes = new DrupalAttribute(''),
  children,
}: CardFooterProps): JSX.Element => {
  const CardFooterAttributes = {
    className: classNames('miz-card__footer', attributes.get('class')),
  }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      CardFooterAttributes[key] = value
    }
  })

  return <div {...CardFooterAttributes}>{children}</div>
}

export interface CardProps extends ElementAttributes {
  children: React.ReactNode
  theme?: 'default' | 'dark'
  variant?: 'default' | 'outline' | 'inline'
  branded?: boolean
}

const Card = ({
  attributes = new DrupalAttribute(''),
  children,
  theme = 'default',
  variant = 'default',
  branded = false,
}: CardProps): JSX.Element => {
  const CardAttributes = {
    className: classNames(
      'miz-card',
      {
        'miz-card--dark': theme === 'dark',
        [`miz-card--${variant}`]: variant !== 'default',
        'miz-card--brand': branded,
      },
      attributes.get('class'),
    ),
  }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      CardAttributes[key] = value
    }
  })

  return <div {...CardAttributes}>{children}</div>
}

export default Card
