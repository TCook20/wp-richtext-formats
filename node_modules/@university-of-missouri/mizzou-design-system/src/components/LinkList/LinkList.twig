{#

  Link list
  List of links, used for non-navigational link grouping.
  @see https://designsystem.missouri.edu/components/detail/miz-link-lists.html

  @uses     LinkListItem, LinkListLink
  @uses     AppendClasses, AddAttributes from @miz/utilties/twig/utils.twig

  @param    {object}    options
  @param    {string}    ├─ options.class
  @param    {object}    ├─ options.attributes
  @param    {string}    ├─ options.element      ("ul"|"div")
  @param    {bool}      ├─ options.layout       Applies inline layout
  @param    {string}    ├─ options.align        Applies right alignment
  @param    {bool}      ├─ options.fill         Makes list fill space
  @param    {array}     ├─ options.list         Array of list items. Use with 'ul' element.
  @param    {array}     └─ options.links        Array of links. Use with 'div' element.

#}
{% macro LinkList( options ) %}
  {%- spaceless %}

    {# Imports #}
    {% import "@miz/utilities/twig/utils.twig" as utils %}
    {% from "@miz/components/LinkList/LinkList.twig" import LinkListItem as linkListItem %}
    {% from "@miz/components/LinkList/LinkList.twig" import LinkListLink as linkListLink %}

    {# Parameters #}
    {% set linkListClass       = "miz-link-list" %}
    {% set linkListAddClass    = options.class ?: false %}
    {% set linkListAttributes  = options.attributes ? utils.AddAttributes( options.attributes ) %}
    {% set linkListElement     = "ul" %}
    {% set linkListElement     = options.element ?: linkListElement %}
    {% set linkListLayout      = options.layout ?: false %}
    {% set linkListAlign       = options.align ?: false %}
    {% set linkListFill        = options.fill ?: false %}
    {% set linkListList        = options.list %}
    {% set linkListLinks       = options.links %}

    {# Variables #}
    {% if linkListLayout %}
      {% set linkListClass     = utils.AppendClasses( linkListClass, 'miz-link-list--inline' ) %}
    {% endif %}
    {% if linkListAlign %}
      {% set linkListClass     = utils.AppendClasses( linkListClass, 'miz-link-list--right' ) %}
    {% endif %}
    {% if linkListFill %}
      {% set linkListClass     = utils.AppendClasses( linkListClass, 'miz-link-list--fill' ) %}
    {% endif %}
    {% set linkListClass       = linkListAddClass ? utils.AppendClasses( linkListClass, linkListAddClass ) : linkListClass %}

  {% endspaceless -%}

  <{{ linkListElement }} class="{{ linkListClass }}"{{ linkListAttributes }}>
    {% for item in linkListList if linkListList|length != 0 -%}
      {{ linkListItem( item ) }}
    {% endfor -%}
    {%- for link in linkListLinks if linkListLinks|length != 0 -%}
      {{ linkListLink( link.link ) }}
    {% endfor -%}
  </{{ linkListElement }}>

{%- endmacro %}

{#

  Link list -> Item
  Link Item used with Link List using <ul>

  @usedby   LinkList
  @uses     LinkListLink
  @uses     AppendClasses, AddAttributes from @miz/utilities/utils.twig

  @param    {object}    options
  @param    {string}    ├─ options.class
  @param    {object}    ├─ options.attributes
  @param    {object}    └─ options.link

#}
{% macro LinkListItem( options ) %}
  {%- spaceless %}

    {# Imports #}
    {% import "@miz/utilities/twig/utils.twig" as utils %}
    {% from "@miz/components/LinkList/LinkList.twig" import LinkListLink as linkListLink %}

    {# Parameters #}
    {% set linkListItemClass       = "miz-link-list__item" %}
    {% set linkListItemClass       = options.class ? utils.AppendClasses( linkListItemClass, options.class ) : linkListItemClass %}
    {% set linkListItemAttributes  = options.attributes ? utils.AddAttributes( options.attributes ) %}
    {% set linkListItemLink        = options.link ?: false %}

  {% endspaceless -%}

  <li class="{{ linkListItemClass }}"{{ linkListItemAttributes }}>{{- linkListLink( linkListItemLink) -}}</li>

{%- endmacro %}

{#

  Link list -> Link
  Link element used within Link lists

  @usedby   LinkList, LinkListItem
  @uses     AppendClasses, AddAttributes from @miz/utilties/utils.twig

  @param    {object}    options
  @param    {string}    ├─ options.class
  @param    {object}    ├─ options.attributes
  @param    {string}    ├─ options.href
  @param    {string}    └─ options.text
 #}
{% macro LinkListLink( options ) %}
  {%- spaceless %}

    {# Imports #}
    {% import "@miz/utilities/twig/utils.twig" as utils %}

    {# Parameters #}
    {% set linkListLinkClass       = "miz-link-list__link" %}
    {% set linkListLinkClass       = options.class ? utils.AppendClasses( linkListLinkClass, options.class ) : linkListLinkClass %}
    {% set linkListLinkAttributes  = options.attributes ? utils.AddAttributes( options.attributes ) %}
    {% set linkListLinkHref        = options.href ?: "#" %}
    {% set linkListLinkText        = options.text ?: "No text" %}

  {#- Output -#}
  <a href="{{ linkListLinkHref }}" class="{{ linkListLinkClass }}"{{ linkListLinkAttributes }}>{{ linkListLinkText }}</a>

  {% endspaceless -%}
{% endmacro %}
