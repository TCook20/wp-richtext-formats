import React from 'react'
import axios from 'axios'
import classNames from 'classnames'

import Event from 'Components/Event/Event'
import { AnchorButton } from 'Components/Button/Button'

export interface CalendarProps {
  method: 'search' | 'group_id' | 'type' | 'keyword'
  term: string
  count: number
  // days: number
}

export interface EventsProps extends CalendarProps {
  title: string | React.ReactNode
  kicker?: string | React.ReactNode
  buttons?: any
}

const Events = ({
  title = 'Calendar Events',
  kicker = 'Mizzou',
  method = 'search',
  term = 'research',
  count = 3,
  // days = 90,
  buttons,
}: EventsProps): JSX.Element => {
  const localistApi = 'https://calendar.missouri.edu/api/2/events/'
  let fullQuery
  let events
  let buttonGroup
  const [query, setQuery] = React.useState(fullQuery)
  const [eventsCollection, setEvents] = React.useState(events)

  const sectionClass = classNames(
    'miz-layer',
    'miz-layer--brand',
    'miz-stack-sandwich--xl',
    'miz-main-grid__full',
  )

  React.useEffect(() => {
    const queryMethod = method === 'search' ? 'search/?search' : `?${method}`
    const queryCount = `pp=${count}`
    // const queryDays = 'days=' + days

    fullQuery = localistApi + queryMethod
    if (term !== '') {
      fullQuery = [fullQuery, term].filter(Boolean).join('=')
    }
    fullQuery = [fullQuery, queryCount].filter(Boolean).join('&')
    fullQuery += `&start=${new Date().toJSON().slice(0, 10).replace(/-/g, '')}&days=90`

    setQuery(fullQuery)
  }, [method, term, count])

  React.useEffect(() => {
    axios
      .get(query)
      .then((response) => setEvents(response.data.events))
      .catch((error) => {
        console.log('Error fetching and parsing data', error)
      })
  }, [query])

  if (eventsCollection && eventsCollection.length > 0) {
    events = eventsCollection.map((event, i) => (
      <Event
        title={event.event.title}
        link={event.event.localist_url}
        startDate={event.event.event_instances[0].event_instance.start}
        endDate={event.event.event_instances[0].event_instance.end}
        location={event.event.location}
        key={i}
      />
    ))
  } else {
    events = <p>No events...</p>
  }

  if (buttons) {
    buttonGroup = buttons.map((button, i) => (
      <AnchorButton branded={true} secondary={true} link={button.link} key={i}>
        {button.title}
      </AnchorButton>
    ))
  }

  return (
    <div className={sectionClass}>
      <div className="miz-container">
        <header className="miz-layer__header miz-layer__header--center">
          {kicker && <p className="miz-layer__kicker">{kicker}</p>}
          <h2 className="miz-layer__title">{title}</h2>
        </header>
        <div className="miz-layer__content">
          <div className="miz-card-deck">{events}</div>
          {buttons && <div className="miz-layer__content--center">{buttonGroup}</div>}
        </div>
      </div>
    </div>
  )
}

export default Events
