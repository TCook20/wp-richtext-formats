{#
  Button
  Base Button component. Builds a <button> element.
  @see    https://designsystem.missouri.edu/components/detail/buttons.html

  @uses   AppendClasses, AddAttributes from @miz/utilties/utils.twig

  @param  {object}    options
  @param  {string}    ├─ options.class
  @param  {object}    ├─ options.attributes
  @param  {string}    ├─ options.type (Required) (button|submit|reset)
  @param  {string}    └─ options.text

  @todo   Possibly require one of the three possible button types.

#}
{% macro Button( options ) %}
  {%- spaceless %}

    {# Imports #}
    {% import "@miz/utilities/twig/utils.twig" as utils %}

    {# Parameters #}
    {% set buttonClass      = "miz-button" %}
    {% set buttonClass      = options.class ? utils.AppendClasses( buttonClass, options.class ) : buttonClass %}
    {% set buttonId         = options.id ? ' id="' ~ options.id ~ '"' : null %}
    {% set buttonAttributes = options.attributes ? utils.AddAttributes( options.attributes ) : null %}
    {% set buttonType       = options.type ?: "button" %}
    {% set buttonText       = options.text ?: "Button" %}

  {% endspaceless -%}

  {# Output #}
  <button class="{{ buttonClass }}"{{ buttonId }} type="{{ buttonType }}"{{ buttonAttributes }}>
    {{ buttonText|raw }}
  </button>

{% endmacro %}

{#
  Button with icon
  Builds a <button> element with an icon.
  @see    https://designsystem.missouri.edu/components/detail/buttons--icon.html

  @uses   Button from @miz/components/Button/Button.twig
  @uses   Icon from @miz/components/Icon/Icon.twig

  @param  {object}    iconOptions See Icon component for more information. This object is passed through using the Icon macro.
  @param  {string}    └─ iconOptions.class

  @param  {object}    options See Button component for available options
  @param  {string}    ├─ options.class
  @param  {string}    └─ options.text

  @todo   Should we add options that create the sizing for the user?
  @todo   Left and right alignment of icon? Currently defaulting to right.

 #}
{% macro ButtonWithIcon( iconOptions, options ) %}
  {%- spaceless %}

    {# Imports #}
    {% import "@miz/utilities/twig/utils.twig" as utils %}
    {% from "@miz/components/Button/Button.twig" import Button as button %}
    {% from "@miz/components/Icon/Icon.twig" import IconSVG as iconSVG %}
    {% from "@miz/components/Icon/Icon.twig" import Icon as icon %}

    {# Parameters #}
    {% set buttonIconClass      = 'miz-icon--button' %}
    {% set buttonIconClass      = iconOptions.class ? utils.AppendClasses( buttonIconClass, iconOptions.class )|trim : buttonIconClass %}

    {% set buttonClass          = 'miz-button--icon' %}
    {% set buttonClass          = options.class ? utils.AppendClasses( buttonClass, options.class )|trim : buttonClass %}
    {% set buttonText           = options.text ?: '' %}

    {# Variables #}
    {# Create options for Icon and merge with any extra values sent. #}
    {% set buttonIconOptions = {
      "class": buttonIconClass
    } %}
    {% set buttonIconOptions = iconOptions|merge(buttonIconOptions) %}

    {# Create button icon from Icon component #}
    {% set buttonIconComponent = iconOptions ? icon( buttonIconOptions ) : null %}

    {# Create buttonOptions, append Icon to buttonText and merge the rest #}
    {% set buttonOptions = {
      "class": buttonClass,
      "text":  buttonIconComponent ~ buttonText
    } %}
    {% set buttonOptions = options|merge(buttonOptions) %}

  {% endspaceless -%}

  {# Output #}
  {{ button( buttonOptions ) }}

{% endmacro %}

{#
  Anchor button
  Builds an <a> element that acts as a button. Use judiciously.
  @see    https://designsystem.missouri.edu/components/detail/buttons.html

  @uses   AppendClasses, AddAttributes from @miz/utilties/utils.twig

  @param  {object}    options
  @param  {string}    ├─ options.class
  @param  {object}    ├─ options.attributes
  @param  {string}    ├─ options.href
  @param  {string}    └─ options.text

  @todo   Should we add options that create the sizing for the user?

 #}
{% macro AnchorButton( options ) %}
  {%- spaceless %}

    {# Imports #}
    {% import "@miz/utilities/twig/utils.twig" as utils %}

    {# Parameters #}
    {% set anchorClass      = 'miz-button' %}
    {% set anchorClass      = options.class ? utils.AppendClasses( anchorClass, options.class ) : anchorClass %}
    {% set anchorAttributes = options.attributes ? utils.AddAttributes( options.attributes ) : null %}
    {% set anchorHref       = options.href ?: '#' %}
    {% set anchorText       = options.text ?: 'Anchor button' %}

  {% endspaceless -%}

  {# Output #}
  <a href="{{ anchorHref }}" class="{{ anchorClass }}"{{ anchorAttributes }}>{{ anchorText|raw }}</a>

{% endmacro %}

{#
  Menu button
  Builds a <button> specifically used for menus.
  @see    https://designsystem.missouri.edu/components/detail/buttons--menu.html

  @uses   AppendClasses, AddAttributes from @miz/utilties/utils.twig
  @uses   ButtonWithIcon from @miz/components/Button/Button.twig

  @param  {object}    options See Button component for available options.
  @param  {object}    └─ options.attributes
  @param  {string}       ├─ options.attributes.id ID for Button.
  @param  {string}       ├─ options.attributes.data-target Value for data-target attribute.
  @param  {string}       └─ options.attributes.aria-label Value for aria-label attribute.

  @todo   Should a user be able to set their own icon here?

 #}
{% macro MenuButton( options ) %}
  {%- spaceless %}

  {# Imports #}
  {% import "@miz/utilities/twig/utils.twig" as utils %}
  {% from "@miz/components/Button/Button.twig" import ButtonWithIcon as buttonWithIcon %}

  {# Parameters #}
  {% set buttonClass      = 'navbar-toggler' %}
  {% set buttonClass      = options.class ? utils.AppendClasses( buttonClass, options.class ) : buttonClass %}
  {% set buttonID         = options.attributes.id ?: 'menuButton' %}
  {% set buttonDataTarget = options.attributes["data-target"] ?: 'menuDataTarget' %}
  {% set buttonAriaLabel  = options.attributes["aria-label"] ?: 'Toggle menu' %}

  {# Variables #}
  {% set iconOptions = {
    class: "miz-icon miz-icon--md miz-svg--black",
    name: "menu"
  } %}

  {% set buttonDataTarget = buttonDataTarget | slice(0,1) == '#' ? buttonDataTarget | slice(1) : buttonDataTarget %}
  {% set buttonOptionsAttributes = {
      "id":             buttonID,
      "data-target":    buttonDataTarget,
      "data-toggle":    "collapse",
      "aria-label":     buttonAriaLabel,
      "aria-expanded":  "false",
      "aria-haspopup":  "true",
      "aria-controls":  buttonDataTarget
  } %}
  {% set buttonOptionsAttributes = buttonOptionsAttributes|merge(options.attributes) %}

  {% set buttonOptions = {
    "class": buttonClass,
    "attributes": buttonOptionsAttributes
  } %}
  {% set buttonOptions = options|merge(buttonOptions) %}

  {% endspaceless -%}

  {# Output #}
  {{ buttonWithIcon( iconOptions, buttonOptions ) }}

{% endmacro %}

{#
  Anchor button for dropdown menu
  An Anchor button is used in Dropdown Menus when

  @param {string} classes (optional) CSS classes for anchor button
  @param {string} id (optional)
  @param {string} text
  @param {string} href
  @param {string} ariaLabel

  @todo Should this be deprecated? It is being used in navs.

#}
{% macro menuAnchorButton(params) %}
  {%- spaceless %}

    {# Parameters #}
    {% set anchorClasses    = params.class ?: 'miz-primary-nav-link' %}
    {% set anchorID         = params.id ?: 'menuAnchorButton' %}
    {% set anchorText       = params.text ?: 'Text' %}
    {% set anchorHref       = params.href ?: '#' %}
    {% set anchorAriaLabel  = params.ariaLabel ?: 'Toggle menu' %}

  {% endspaceless -%}

  <a href="{{ anchorHref }}" class="{{ anchorClasses }}" role="button" id="{{ anchorID }}" data-toggle="dropdown" aria-haspopup="true" aria-controls="{{ anchorDataTarget }}" aria-expanded="false" aria-label="{{ anchorAriaLabel }}">{{ anchorText }}
  </a>

{% endmacro %}
