import React from 'react'
import DrupalAttribute from 'drupal-attribute'
import classNames from 'classnames'
import { ElementAttributes } from 'Components/Base/BaseElement'

/**
 * Styling props for Buttons
 */
export interface ButtonStyles {
  primary?: boolean
  secondary?: boolean
  branded?: boolean
  variant?: 'default' | 'light' | 'ghost'
  size?: 'small' | 'default' | 'large'
}

/**
 * Button Props
 */
export interface ButtonProps extends ElementAttributes, ButtonStyles {
  children: React.ReactNode
  onClick?: any
}

const Button = ({
  attributes = new DrupalAttribute(''),
  children,
  primary = false,
  secondary = false,
  branded = false,
  variant = 'default',
  size = 'default',
  ...props
}: ButtonProps): JSX.Element => {
  const buttonAttributes: Record<string, unknown> = {
    className: classNames(
      'miz-button',
      {
        'miz-button--brand': branded,
        'miz-button--primary': primary && variant !== 'ghost',
        'miz-button--secondary': secondary && !primary && variant !== 'ghost',
        [`miz-button--${variant}`]: variant !== 'default',
        'miz-button--ghost-gold': primary && variant === 'ghost',
        'miz-button--small': size === 'small',
        'miz-button--lg': size === 'large',
      },
      attributes.get('class'),
    ),
  }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      buttonAttributes[key] = value
    }
  })

  return (
    <button {...buttonAttributes} {...props}>
      {children}
    </button>
  )
}

export interface AnchorButtonProps extends ButtonProps {
  link: string
}

export const AnchorButton = ({
  attributes = new DrupalAttribute(''),
  children,
  primary = false,
  secondary = false,
  branded = false,
  variant = 'default',
  size = 'default',
  link,
  ...props
}: AnchorButtonProps): JSX.Element => {
  const buttonAttributes: Record<string, unknown> = {
    className: classNames(
      'miz-button',
      {
        'miz-button--brand': branded,
        'miz-button--primary': primary && variant !== 'ghost',
        'miz-button--secondary': secondary && !primary && variant !== 'ghost',
        [`miz-button--${variant}`]: variant !== 'default',
        'miz-button--ghost-gold': primary && variant === 'ghost',
        'miz-button--small': size === 'small',
        'miz-button--lg': size === 'large',
      },
      attributes.get('class'),
    ),
    href: link,
  }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      buttonAttributes[key] = value
    }
  })

  return (
    <a {...buttonAttributes} {...props}>
      {children}
    </a>
  )
}

export default Button
