import React from 'react'
import classNames from 'classnames'
import DrupalAttribute from 'drupal-attribute'

export interface ListItemProps {
  attributes?: DrupalAttribute
  children: React.ReactNode
}

const ListItem = ({
  attributes = new DrupalAttribute(''),
  children,
}: ListItemProps): JSX.Element => {
  const listItemAttributes: Record<string, unknown> = {
    className: classNames('miz-list-group__item list-group-item', attributes.get('class')),
  }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      listItemAttributes[key] = value
    }
  })

  return <li {...listItemAttributes}>{children}</li>
}

export interface ListGroupProps {
  attributes?: DrupalAttribute
  type?: 'ordered' | 'unordered'
  list?: any
}

const ListGroup = ({
  attributes = new DrupalAttribute(''),
  type = 'unordered',
  list,
}: ListGroupProps): JSX.Element => {
  let listItems

  const ListGroupAttributes = {
    className: classNames('miz-list-group list-group', attributes.get('class')),
  }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      ListGroupAttributes[key] = value
    }
  })

  if (list) {
    listItems = list.items.map((listItem, i) => (
      <ListItem key={i}>{listItem.item.content}</ListItem>
    ))
  }

  if (type === 'ordered') {
    return <ol {...ListGroupAttributes}>{listItems}</ol>
  }

  return <ul {...ListGroupAttributes}>{listItems}</ul>
}

export default ListGroup
