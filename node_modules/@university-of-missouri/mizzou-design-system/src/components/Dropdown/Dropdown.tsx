import React from 'react'
import classNames from 'classnames'
import DrupalAttribute from 'drupal-attribute'
import { ElementAttributes } from 'Components/Base/BaseElement'
import Button, { ButtonProps } from 'Components/Button/Button'

interface DropdownButtonProps extends ButtonProps {
  collapsed?: boolean
}

const DropdownButton = ({
  children,
  attributes = new DrupalAttribute(''),
  collapsed = true,
  ...props
}: DropdownButtonProps): JSX.Element => {
  const dropdownButtonAttributes: Record<string, unknown> = {
    className: classNames('miz-button', 'miz-dropdown__button', attributes.get('class')),
  }
  return (
    <Button {...dropdownButtonAttributes} {...props}>
      {children}
    </Button>
  )
}

interface DropdownContent extends ElementAttributes {
  children: React.ReactNode
  collapsed?: boolean
}

const DropdownContent = ({ children, collapsed }: DropdownContent): JSX.Element => {
  const className = classNames('miz-dropdown__content', {
    show: !collapsed,
  })
  return <div className={className}>{children}</div>
}

/**
 * Dropdown Props
 */
export interface DropdownProps extends ElementAttributes {
  children: React.ReactNode
  onClick?: any
}

const Dropdown = ({
  attributes = new DrupalAttribute(''),
  children,
  ...props
}: DropdownProps): JSX.Element => {
  const aryChildren = React.Children.toArray(children)
  const dropdownAttributes: Record<string, unknown> = {
    className: classNames('miz-dropdown', attributes.get('class')),
  }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      dropdownAttributes[key] = value
    }
  })
  const [collapsed, setCollapsed] = React.useState(true)

  return (
    <div {...dropdownAttributes} {...props}>
      {React.Children.map(aryChildren, (child: any) => {
        if (child.type.name === 'DropdownButton') {
          return React.cloneElement(child, { collapsed, onClick: () => setCollapsed(!collapsed) })
        }
        return React.cloneElement(child, { collapsed })
      })}
    </div>
  )
}

export default Object.assign(Dropdown, {
  Button: DropdownButton,
  Content: DropdownContent,
})
