import * as React from 'react'
import DrupalAttribute from 'drupal-attribute'
import classNames from 'classnames'

import Button, { ButtonProps } from 'Components/Button/Button'

export const useToggle = (initialValue: boolean): [boolean, () => void] => {
  const [value, setValue] = React.useState(initialValue)
  const toggleValue = () => setValue(!value)
  return [value, toggleValue]
}

export interface AccordionButtonProps extends ButtonProps {
  isVisible: boolean
  theme?: boolean
}

export const AccordionButton = ({
  attributes = new DrupalAttribute(''),
  isVisible = false,
  onClick,
  children,
  theme = false,
  ...args
}: AccordionButtonProps): JSX.Element => {
  const atts: Record<string, unknown> = { className: '', ...args }

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      atts[key] = value
    }
  })

  return (
    <Button
      attributes={attributes
        .addClass('miz-accordion__button')
        .setAttribute('aria-expanded', 'isVisible')}
      onClick={onClick}
      secondary={theme}
    >
      {children}
    </Button>
  )
}

export interface AccordionContentProps {
  attributes: DrupalAttribute
  children: React.ReactNode
  isVisible: boolean
}

export const AccordionContent = ({
  attributes = new DrupalAttribute(''),
  isVisible = false,
  children,
}: AccordionContentProps): JSX.Element => {
  const atts: Record<string, unknown> = { className: '' }

  const accordionContentClass: string = classNames('miz-accordion__content', {
    show: isVisible,
  })

  attributes.addClass(accordionContentClass)

  attributes.forEach((value, att) => {
    if (att === 'class') {
      atts.className = value.join(' ')
    } else {
      atts[att] = value
    }
  })

  return <div {...atts}>{children}</div>
}

export interface AccordionProps {
  attributes?: DrupalAttribute
  theme: 'default' | 'dark'
  children?: React.ReactNode
  branded?: boolean
  button: string
  content: React.ReactNode
}

const Accordion = ({
  attributes,
  theme = 'default',
  children,
  branded = false,
  button = 'Button',
  content,
}: AccordionProps): JSX.Element => {
  const atts: Record<string, unknown> = {
    className: classNames(
      'miz-accordion',
      {
        'miz-accordion--brand': branded,
        'miz-accordion--dark': theme === 'dark',
      },
      attributes.get('class'),
    ),
    id: '',
  }

  const [isVisible, toggleVisible] = useToggle(false)

  attributes.forEach((value, key) => {
    if (key !== 'class') {
      atts[key] = value
    }
  })

  return (
    <section {...atts}>
      <AccordionButton onClick={toggleVisible} isVisible={isVisible} theme={theme === 'dark'}>
        {button}
      </AccordionButton>
      <AccordionContent attributes={new DrupalAttribute('')} isVisible={isVisible}>
        {content}
      </AccordionContent>
      {children}
    </section>
  )
}

export default Accordion
