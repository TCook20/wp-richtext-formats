import React, { useState, useEffect } from 'react'
import classNames from 'classnames'
import DrupalAttribute from 'drupal-attribute'
import { ElementAttributes } from 'Components/Base/BaseElement'
import Icon from 'Components/Icon/Icon'

export interface BlockMessageProps extends ElementAttributes {
  title: string | React.ReactNode
  children: React.ReactNode
  variant?: 'default' | 'error' | 'info' | 'success' | 'warning'
}

export interface BlockMessageTitleProps extends ElementAttributes {
  children: string | React.ReactNode
  className?: string
  icon?: 'string'
}

export const BlockMessageTitle = ({
  children,
  attributes = new DrupalAttribute(''),
  className,
  icon,
  ...props
}: BlockMessageTitleProps): JSX.Element => {
  const blockMessageTitleAttributes: Record<string, unknown> = {
    className: classNames(
      'miz-block-message__title',
      { 'miz-block-message__title--icon': icon },
      className,
      attributes.get('class'),
    ),
  }

  return (
    <h2 {...blockMessageTitleAttributes} {...props}>
      {icon && (
        <Icon
          name={icon}
          attributes={new DrupalAttribute('').addClass('miz-block-message__icon')}
        ></Icon>
      )}
      {children}
    </h2>
  )
}

const BlockMessage = ({
  attributes = new DrupalAttribute(''),
  title,
  children,
  variant = 'default',
  ...props
}: BlockMessageProps): JSX.Element => {
  const [icon, setIcon] = useState(null)

  useEffect(() => {
    if (variant === 'info') {
      setIcon('info')
    } else if (variant === 'error') {
      setIcon('error')
    } else if (variant === 'success') {
      setIcon('done_outline')
    } else if (variant === 'warning') {
      setIcon('warning')
    } else {
      setIcon(null)
    }
  }, [variant])

  const blockMessageAttributes: Record<string, unknown> = {
    className: classNames(
      'miz-block-message',
      {
        [`miz-block-message--${variant}`]: variant !== 'default',
      },
      attributes.get('class'),
    ),
  }

  return (
    <div {...blockMessageAttributes} {...props}>
      <div className="miz-block-message__header">
        <BlockMessageTitle icon={icon}>{title}</BlockMessageTitle>
      </div>
      <div className="miz-block-message__content">{children}</div>
    </div>
  )
}

export default BlockMessage
